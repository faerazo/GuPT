[
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Define what a robot is and its interaction modalities; Identify and collate user requirements to design human-robot interaction; Decide on human-robot interaction design decisions based on the users' needs",
        "competence_and_skills": "Describe stages of the design process for human-robot interaction; Identify suitable human-robot interaction modalities for the context of use; Make informed evaluations and analyses of human-robot interaction design",
        "judgement_and_approach": "Describe methods of designing human-robot interactions; Design robot interactions with user experience principles in mind; Derive critical and ethical implications for how human-robot interaction that can impact our society"
      }
    ],
    "course_code": "DIT007",
    "course_name": "Human-Robot Interaction Design",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course the student must have a Bachelor degree of 180 credits. Additionally, a course in Human - computer interaction, 7.5 credits, is required. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The research and development of robots range from domestic robots, autonomous robotic agents, virtual agents, and industrial robots. Human-Robot Interaction (HRI) is a discipline that is concerned with how we design, develop, and evaluate robotic agents with the user in the loop. This course introduces the HRI design practices, evaluation methods and approaches. In particular, the course will apply human-centered approaches to design for the (1) abilities to consider in a robot, the (2) interaction modalities a robot should have, and (3) the form and appearance of a robot. The course will also give an understanding of the impact robots can have on our society, and the importance of the ethical and critical considerations when designing them.",
    "assessment": "The examination consists of two modules, namely: Assignments, 3 credits (pass / fail) Report, 4 credits (Fail, 3,4,5)",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). To pass the course, students must receive a passing grade in both modules. The grade for the entire course will be determined by the report.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/manniska-robot-interaktion-design-dit007",
      "international_website": "/en/study-gothenburg/human-robot-interaction-design-dit007",
      "course_name": "Human-Robot Interaction Design",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "24 Mar 2025",
      "duration_end": "8 Jun 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86092",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT007",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The research and development of robots range from domestic robots, autonomous robotic agents, virtual agents, and industrial robots. Human-Robot Interaction (HRI) is a discipline that is concerned with how we design, develop, and evaluate robotic agents with the user in the loop. This course introduces the HRI design practices, evaluation methods and approaches. In particular, the course will apply human-centered approaches to design for the (1) abilities to consider in a robot, the (2) interaction modalities a robot should have, and (3) the form and appearance of a robot. The course will also give an understanding of the impact robots can have on our society, and the importance of the ethical and critical considerations when designing them.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course the student must have a Bachelor degree of 180 credits. Additionally, a course in Human - computer interaction, 7.5 credits, is required.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "22 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "master the terminology and key concepts in computer architecture in order to follow the research advances in this field",
        "competence_and_skills": "state and describe software performance for enhancement techniques: especially advanced pipelining techniques that can execute multiple instructions in parallel; state and describe the principles behind modern memory hierarchies and storage systems",
        "judgement_and_approach": "quantitatively assess the impact of an architectural technique on the performance of application software using state-of-the-art simulation tools"
      }
    ],
    "course_code": "DIT051",
    "course_name": "Computer Architecture",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "The requirement for the course is to have successfully completed two years of studies within Computer Science or equivalent. The course DIT122 Computer system engineering (Datorsystemteknik) or equivalent is required.",
    "course_content": "[\"trends affecting computer technology evolution, instruction-set architecture design, techniques for instruction level parallelism, memory hierarchies, storage systems, multiprocessor systems\"]",
    "assessment": "The student is examined by written Project report (1.5 hecs) individually or in group and a Written exam (6.0 hecs) done individually in an examination hall.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/computer-architecture-dit051",
      "international_website": "/en/study-gothenburg/computer-architecture-dit051",
      "course_name": "Computer Architecture",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "2 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86035",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT051",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The course covers architectural techniques necessary to achieve high performance for user programs. It also covers simulation-based analysis methods for quantitative assessment of the impact of a particular architectural technique on performance.\nThe content is divided into the following parts:\n1. The first part covers aspects affecting the development of computer technology including Moore's Law, performance measures (execution time vs. throughput), benchmarking, and fundamentals of computer performance such as Amdahl's Law and memory access locality.\n2. The second part covers various techniques for exploiting instruction level parallelism (ILP) by defining key concepts of what ILP is and what limits it. The techniques covered fall into two categories: dynamic and static techniques. The main dynamic techniques covered are Tomasulo's algorithm, branch prediction and speculation. The most important static techniques are loop unrolling, software pipelining, trace scheduling and predicated instructions.\n3. The third part covers principles of modern memory hierarchies such as inclusive and non-inclusive memory hierarchies, lockup free caching techniques, prefetching, classification of cache misses.\n4. The fourth part deals with multi-core microprocessors and techniques such as multi-threading and cache coherence.",
      "prerequisites_and_selection": {
        "entry_requirements": "Successfully completed two year of studies within the subject Computer Science or equivalent. The course DIT122 Datorsystemteknik or equivalent is required. Applicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "describe why sustainable computing is an important current topic; describe the electrical mechanisms that cause power to be dissipated; describe circuit techniques for reducing power dissipation and the impact on performance; describe computer architecture, memory, and secondary storage techniques for reducing energy consumption; describe techniques at the operating system, runtime, and application for reducing energy consumption; explain what affects the energy consumption of computer systems especially concerning their architecture",
        "competence_and_skills": "use specific devices to directly measure energy consumption of the whole system; use performance counters to measure the energy consumption of certain components in the system; use simulation tools to estimate the energy consumption of different system configurations",
        "judgement_and_approach": "identify the strengths and weaknesses of different classes of computer system components (e.g. processor, memory), with respect to energy efficiency; evaluate and compare different architecture and system techniques in terms of the energy efficiency; explain the methods for evaluating and reporting the energy consumption in computer systems and how these can be used to optimize the system; judge the importance of energy consumption from societal and ethical perspectives; interpret requirements on the architecture of computer systems to meet societal needs for sustainability"
      }
    ],
    "course_code": "DIT056",
    "course_name": "Sustainable computing",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "Students must have completed 7.5 credits in computer architecture (e.g., DIT051 Computer Architecture, or equivalent). Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The aim of the course is to make students aware of the importance of sustainability in computing and to show techniques to achieve it at the different levels of a computer system. The course is intended to give an overview of the energy efficiency aspects of computer systems and computing, ranging from the electronic circuits up to the applications for systems ranging from small IoT devices to large data centers. For instance, students will learn about approaches to measuring and estimating the energy consumption of different architectural components as well as architecture and software techniques to save energy in the system.",
    "assessment": "The course is examined by an individual written exam done in an examination hall and approved lab exercises. The lab work is done in groups of normally 2-3 students.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). In order to get one of the grades 5, 4 or 3 one has to get the grade G on the sub-course Assignments, and a passing grade (5, 4 or 3) on the sub-course Written hall examination. In that case the grade on the course is the grade on the sub-course Written hall examination. In other cases the grade on the course is U (fail).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/hallbar-databehandling-dit056",
      "international_website": "/en/study-gothenburg/sustainable-computing-dit056",
      "course_name": "Sustainable computing",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "4 Nov 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18651",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT056",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The aim of the course is to make students aware of the importance of sustainability in computing and to show techniques to achieve it at the different levels of a computer system. The course is intended to give an overview of the energy efficiency aspects of computer systems and computing, ranging from the electronic circuits up to the applications for systems ranging from small IoT devices to large data centers. For instance, students will learn about approaches to measuring and estimating the energy consumption of different architectural components as well as architecture and software techniques to save energy in the system.",
      "prerequisites_and_selection": {
        "entry_requirements": "Students must have completed 7.5 credits in computer architecture (e.g., DIT051 Computer Architecture, or equivalent). Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "6 September 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "discuss important technological aspects when designing and implementing analysis solutions for large-scale data; explain differences between parallel programming models; describe data structures and algorithms for big data and discuss their utility.",
        "competence_and_skills": "implement applications for transforming and analyzing large-scale data with different parallel software frameworks; use algorithms and datastructures for computations with large-scale data.",
        "judgement_and_approach": "suggest appropriate computational infrastructures and methodological approaches for analysis tasks and discuss their advantages and drawbacks; discuss advantages and drawbacks of different strategies of parallelization; decide between algorithmic and parallelization-based approaches for accelerating computational workloads"
      }
    ],
    "course_code": "DIT066",
    "course_name": "Computational techniques for large-scale data",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible to the course, the student should have a Bachelor's degree in any subject, or have successfully completed 90 credits of studies in computer science, software engineering, or equivalent. Specifically, at least 15 credits of successfully completed courses in programming, of which at least 7.5 credits in Python programming, or equivalent are required. The student needs to have successfully completed a course in probability theory or statistics, for example DIT862 or MSG810 or similar.",
    "course_content": "The aim of this course is to deepen the students knowledge and skills and familiarize them with the technical and technological side of data science, including software respectively hardware environments. The course will introduce aspects of designing and implementing large-scale data science solutions. In particular, the course will include: an overview of computer architectures, algorithmic approaches, and high-performance computing infrastructures with a focus on limitations for processing large-scale data, an introduction to relevant frameworks for cluster computing with large-scale data, implementation of data analysis tools on a cluster using Python and appropriate software frameworks, data structures and algorithms, such as index structures, which can greatly accelerate computations with large-scale data",
    "assessment": "The course is examined by a written hall examination, as well as mandatory written assignments, some of which will be carried out individually and others will be carried out in groups of normally 2-4 students. There will be non-obligatory individual assignments which grant bonus points for the written examination. These bonus points are valid for the two next scheduled re-examinations.",
    "grading": "Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/berakningsmetoder-for-storskaliga-data-dit066",
      "international_website": "/en/study-gothenburg/computational-techniques-for-large-scale-data-dit066",
      "course_name": "Computational techniques for large-scale data",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "24 Mar 2025",
      "duration_end": "8 Jun 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86107",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT066",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "",
      "prerequisites_and_selection": {
        "entry_requirements": "",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "26 August 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Describe and state how applications can communicate securely and what possible tools and protocols exist in order to offer different levels of security; Show knowledge about how to evaluate new protocols and the level of security they may offer; Show skills to draw own conclusions and understand what makes systems vulnerable and be able to predict new attack methods before they become a reality; Describe what impact the selection of different protocols and security architectures can have to an application or to a system.",
        "competence_and_skills": "Critically analyze and design secure networks, applications and systems; Show skills to evaluate the security needs for networked systems and applications; Obtained skills to be able to communicate efficiently with professionals working in the field",
        "judgement_and_approach": "Judge what is required by a sound security architecture; Describe and formulate how to evaluate the security needs for networked systems and applications"
      }
    ],
    "course_code": "DIT071",
    "course_name": "Network Security",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "The requirement for the course is to have successfully completed two years studies within the subject Computer Science or equivalent. Specifically, the course DIT420 Computer Communication or equivalent is required. A course in Computer security such as DIT641 is recommended but not required.",
    "course_content": "[\"Network attacks, encryption and random number generation\", \"Analysis of weaknesses and attacks against common protocols such as TCP, UDP, IP, and ICMP. Denial of service (DOS) attacks. Scanning and operating system fingerprinting.\", \"Access control, authentication mechanisms, passwords, Radius, AAA, PKI, key distribution, Kerberos\", \"Identity management, certificates, X.509, revocation, smart cards, LDAP, OCSP\", \"Security protocols such as IPSec , SSL and SSH\", \"Security in wireless networks, WEP, WPA, IEEE 802.1x, EAP, TKIP\", \"Network design, firewalls, packet filters, proxies, NAT, tunnelling, ingress and egress filtering\", \"Virtual private networks (VPN), tunnelling protocols, segmentation and remote access\", \"Logs, alarms, syslog, SNMP\", \"Link level security, VLAN technology, security in ARP, DHCP and DNS.\"]",
    "assessment": "An individual written exam given in an examination hall. Four laboratory exercises, carried out in pairs in the departments laboratory.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U). To pass the course the student must pass both the laboratory exercises and the written exam.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/network-security-dit071",
      "international_website": "/en/study-gothenburg/network-security-dit071",
      "course_name": "Network Security",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "24 Mar 2025",
      "duration_end": "8 Jun 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86079",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT071",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "Why is it possible to break into networked computer systems? What weaknesses are used? And what makes one protocol more secure than another? This course answers these questions and more. We begin the course by looking at weaknesses that have plagued networked systems for years. We then continue with countermeasures like firewalls and security protocols such as SSL, SSH and IPsec and investigate in detail what makes them secure. The course also gives a survey of cryptographic tools and explains how they can be utilized in protocols and applications, for example how to provide secure user authentication over a public network.\nKnowledge about possible threats and countermeasures is important not only for the network security specialist but also for application programmers and everyone else who wants to understand what level of security a system and an application can offer. By knowing the problems, future systems can be designed to be much more secure and reliable than today.\nThe course covers many topics related to communications and network security:\nNetwork attacks, encryption and random number generation\nAnalysis of weaknesses and attacks against common protocols such as TCP, UDP, IP, and ICMP. Denial of service (DOS) attacks. Scanning and operating system fingerprinting.\nAccess control, authentication mechanisms, passwords, Radius, AAA, PKI, key distribution, Kerberos\nIdentity management, certificates, X.509, revocation, smart cards, LDAP, OCSP\nSecurity protocols such as IPSec , SSL and SSH\nSecurity in wireless networks, WEP, WPA, IEEE 802.1x, EAP, TKIP\nNetwork design, firewalls, packet filters, proxies, NAT, tunnelling, ingress and egress filtering\nVirtual private networks (VPN), tunnelling protocols, segmentation and remote access\nLogs, alarms, syslog, SNMP\nLink level security, VLAN technology, security in ARP, DHCP and DNS.\nThe course consists of a series of lectures and laborative exercises. The laborative exercises focus on network scanning, building firewalls and study of common security protocols such as SSL",
      "prerequisites_and_selection": {
        "entry_requirements": "Successfully completed two years of studies within the subject Computer Science or equivalent. Specifically, the course DIT420 Computer Communication or equivalent is required. A course in Computer security such as DIT641 is recommended but not required. Applicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "30 October 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "describe how mobile computing is defined and distinguished from other kinds of computing applications; describe what competences and resources are necessary for creating and utilizing mobile applications at different scales for different purposes (e.g. startup, enterprise, agency, freelance, artistic, altruistic, and research projects); interpret and explain relevant technological and contextual trends in commercial value creation and academic research; describe the latest technological research on mobile computing, and explain why research and commercial applications may diverge; describe the distinction between different design methods and tools (e.g. research methods, prototyping tools and approaches) that are appropriate for mobile computing; describe humanistic and societal issues (e.g. health, economics, politics) that are relevant to mobile computing; describe the landscape of mobile computing research, building on and properly citing relevant resources",
        "competence_and_skills": "develop functional software which runs on a mobile computing platform; select and execute appropriate design tactics (e.g. graphic design, typography, 3D modeling, photography, motion graphics) at an appropriate level of fidelity and excellence, to create mobile computing user interfaces; select and execute appropriate design tactics (e.g. graphic design, typography, 3D modeling, photography, motion graphics) at appropriate proportions and levels of excellence, to document and present mobile computing artifacts execute and document a complete design project which culminates in a mobile computing artifact",
        "judgement_and_approach": "execute and critique design research approaches that are appropriate for mobile computing, including ethnographic methods; critique the reasoning (strategy) and aesthetics (tactics) of mobile computing projects constructively; find, utilize, and properly acknowledge non-academic technical and tactical building blocks for mobile computing designs; interpret, constructively critique, and contribute to discussions on mobile computing in the public sphere; make and justify strategic design decisions to create relevant mobile computing artifacts."
      }
    ],
    "course_code": "DIT075",
    "course_name": "Mobile Computing: Design and Implementation",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course the student must have:\n\nA bachelor's degree of 180 credits\nObject-oriented programming (7,5 credits) or equivalent -\nAt least one of the following or equivalent (7,5 credits):\n\nTIA100 Human-Centred Design\nTIA104 Interaction Design Methodology\nTIA106 Graphical Interfaces\nDEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING",
    "course_content": "We define 'mobile computing' in two ways:\n\nPortable digital devices. Examples: smartphones, tablets, smartwatches and other wearables, RFID cards, and IoT applications...\nApplications where the user is mobile. Examples: commuting, tourism, driving, biking, sports, walking, exploring, navigating...\nThis course introduces concepts, methods, and technologies relevant to design and implementation of mobile computing applications. A broad range of topics is covered, from conventional smartphones and tablets, to emerging technologies.",
    "assessment": "The course consists of two modules:\n1.Project (Projekt), 3.5 credits\nGrading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)\n2.Assignments (Inlämningsuppgifter), 4 credits\nGrading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "grading": "Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/mobila-datorer-design-och-implementering-dit075",
      "international_website": "/en/study-gothenburg/mobile-computing-design-and-implementation-dit075",
      "course_name": "Mobile Computing: Design and Implementation",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "2 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86045",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT075",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "During this course the definition of \"mobile computing\" will be discussed. \"Mobile computing\" can be defined in two ways:\n- Portable digital devices. Examples: smartphones, tablets, smartwatches and other wearables, RFID cards, and IoT applications...\n- Applications where the user is mobile. Examples: commuting, tourism, driving, biking, sports, walking, exploring, navigating...\nThe course introduces concepts, methods, and technologies relevant to design and implementation of mobile computing applications. A broad range of topics is covered,from conventional smartphones and tablets, to emerging technologies.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course the student must have:\nA bachelor's degree of 180 creditsObject-oriented programming (7,5 credits) or equivalent - At least one of the following or equivalent (7,5 credits):TIA100 Human-Centred DesignTIA104 Interaction Design MethodologyTIA106 Graphical InterfacesTIA243 Designing User ExperiencesTIG095 Human-Computer Interaction\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "describe algorithms and their qualities: explain algorithms in writing, so that others can understand how they work, why they are correct and fast, and where they are useful; recognize and formalize non-trivial computational problems that appear in various real-world computer applications and which need to be solved by algorithms;  intractability: recognize intractable problems and other classes of problems like P,NP, NPC; prove the correctness of algorithms",
        "competence_and_skills": "design: apply the main design techniques for efficient algorithms (for instance greedy, dynamic programming, divide-and-conquer) to problems which are similar to the textbook examples but new; perform in simple cases the whole development cycle of algorithms: problem analysis, choosing, modifying and combining suitable techniques and data structures, analysis of correctness and complexity, looking for possible improvements, etc;  perform simple reductions between problems, explain NP completeness, recognize various computationally hard problems which tend to appear over and over again in different applications",
        "judgement_and_approach": "critically assess algorithmic ideas and demonstrate the ability to see through obvious and seemingly plausible algorithms that often turn out to be incorrect;  analyse: explain why the time efficiency of algorithms is crucial, express the time complexity in a rigorous and scientifically sound manner, analyze the time complexity of algorithms (sum up operations in nested loops, solve standard  recurrences, etc.) i.e. perform an objective evaluation of the performance and be able to compare it to other algorithms performance"
      }
    ],
    "course_code": "DIT093",
    "course_name": "Algorithms",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "The requirement for the course is to have successfully completed coursers corresponding to 120 hp in the subject Computer Science or Mathematics including:\n\n•7.5 hec in discrete mathematics (DIT980 Discrete Mathematics for Computer Scientists, or the sub-course Introductory Algebra of MMG200 Mathematics I, or equivalent),\n•additionally 10 hec in mathematics,\n•7.5 hec in imperative or object oriented programming (DIT012 Imperative Programming with Basic Object-orientation, or equivalent),\n•additionally 7.5 hec in programming,\n•7.5 hec in data structures (DIT960 Data Structures, DIT375 Python for Data Scientists or equivalent).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The course topics are as follows:\n\n•What is an efficient algorithm?\n•Tools for analysis of algorithms. O-notation. Analyzing loops and recursive calls.\n•Solving recurrence relations.\n•Data structures and algorithms. Review of basic data structures.\n•Graph algorithms.\n•Greedy algorithms.\n•Divide-and-conquer.\n•Dynamic programming.\n•Exhaustive search.\n•Basic complexity theory. Complexity classes P, NP, and NPC, reductions.\nExamples of NP-complete problems. Coping with hard problems.\n•Combine different design techniques and data structures.\n•Short orientation about other design techniques: e.g. randomized algorithms, preprocessing, and others.",
    "assessment": "The course is examined by an individual written hall-exam.",
    "grading": "The grading scale comprises Fail (U), 3, 4 or 5, according to the results of the written exam.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/algoritmer-dit093",
      "international_website": "/en/study-gothenburg/algorithms-dit093",
      "course_name": "Algorithms",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "2 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86028",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT093",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The course topics are as follows:\nIntroduction. What is an efficient algorithm?\nTools for analysis of algorithms. O-notation. Analyzing loops and recursive calls. Solving recurrences;\nData structures and algorithms. Review of basic data structures;\nCombining data structures. Merge-and-find;\nGraph algorithms;\nGreedy algorithms;\nDivide-and-conquer;\nDynamic programming;\nBacktracking and Implicit search trees. Branch-and-bound;\nShort introduction to local search and approximation algorithms;\nBasic complexity theory. Complexity classes P, NP, and NPC, reductions. Examples of NP-complete problems. Coping with hard problems;\nShort introduction to other design techniques: local search, approximation algorithms, randomized algorithms, preprocessing, network flow.",
      "prerequisites_and_selection": {
        "entry_requirements": "The requirement for the course is to have successfully completed coursers corresponding to 120 hp in the subject Computer Science or Mathematics including:\n- 7\\.5 credits in discrete mathematics (DIT980 Discrete Mathematics for Computer Scientists, or the sub-course Introductory Algebra of MMG200 Mathematics I, orequivalent),- additionally 10 creditsin mathematics,- 7\\.5 creditsin imperative or object oriented programming (DIT012 ImperativeProgramming with Basic Object-orientation, or equivalent),- additionally 7.5 creditsin programming,- 7\\.5 creditsin data structures (DIT960 Data Structures, DIT375 Python for DataScientists or equivalent).\nApplicants must prove knowledge of English: English 6/English B or the equivalent levelof an internationally recognized test, for example TOEFL, IELTS",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "18 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Describe the role of a game designer within a game design project; Discuss game design features explicitly using both de facto industry concepts and theoretical frameworks; Relate current game designs to earlier examples, from the direct predecessors to the first recorded example of similar games",
        "competence_and_skills": "Plan game design projects according to best practice description; Develop a game design concept from initial idea to a full game design document, using iterative design processes and prototyping; Specify target audience and develop specific game design concepts for specific target audience; Present game design concepts for an audience",
        "judgement_and_approach": "Motivate different perspectives on game games and use of games, both from practical and ethical aspects; Analyze different game design using analytical tools to be able to suggest design  changes and compare different game designs; Evaluate game concepts and prototypes from the needs of different target audiences"
      }
    ],
    "course_code": "DIT098",
    "course_name": "Gameplay Design",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course the student must have a Bachelor's degree, 180 higher education credits or have passed 60 higher education credits in the subject Computer Science. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "Gameplay design focuses on how the rules and game components can be used to create game environments that encourage and advocate specific interaction, either between people or between people and the game system. The goal of these environments can vary from experimental environments in the automotive or aerospace industry, learning environments in simulations for pure entertainment environments on home computers or game consoles. The course covers general design methods that can be applied in all these areas. The course aims to provide an understanding of how all the components in a game environment interact with each other as well as the relations gameplay design have to other areas necessary for contemporary interactive simulations, such as programming and graphical design. Key issues addressed in the course is how to motivate users to some specific interaction, the relationship between interaction and narrative, how to balance the interaction in multi-user environments, how to support and encourage the creativity of the user, how to modify the design solutions to suit both new and experienced users as well as how to change design solutions to suit the interaction sessions with time constraints.",
    "assessment": "The course is examined through three exercises and four tasks. The tasks are to be submitted in writing except two subtasks to one of the tasks that are practical. All the parts are scored and added together for a final grade. When all steps are completed and approved one grade is reported in Ladok.",
    "grading": "Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/gameplay-design-dit098",
      "international_website": "/en/study-gothenburg/gameplay-design-dit098",
      "course_name": "Gameplay Design",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "4 Nov 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18654",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT098",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The Gameplay design course will focus on how the rules and game components can be used to create game environments that encourage and advocate specific interaction, either between people or between people and the game system. The goal of these environments can vary from experimental environments in the automotive or aerospace industry, learning environments in simulations for pure entertainment environments on home computers or game consoles. The course covers general design methods that can be applied in all these areas.\nThe course aims to provide an understanding of how all the components in a game environment interact with each other as well as the relations gameplay design have to other areas necessary for contemporary interactive simulations, such as programming and graphical design. Key issues addressed in the course is how to motivate users to some specific interaction, the relationship between interaction and narrative, how to balance the interaction in multi-user environments, how to support and encourage the creativity of the user, how to modify the design solutions to suit both new and experienced users as well as how to change design solutions to suit the interaction sessions with time constraints.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course the student must have a Bachelor's degree, 180credits or have passed 60 credits in the subject Computer Science.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "12 August 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "apply practical knowledge of security for modern programming languages; demonstrate critical knowledge of principles behind application-level attacks (such as Trojan horses, worms, buffer overrun attacks, web application attacks, covert channels, and malicious code); define language-based protection mechanisms (such as static security analysis, program transformation, and stack inspection)",
        "competence_and_skills": "demonstrate the ability to identify application and language-level security threats; specify and argue for application and language-level security policies; design and claim the security, clarity, usability, and efficiency of solutions; implement such solutions in expressive programming languages",
        "judgement_and_approach": "develop judgement that will allow them to apply their knowledge in new environments"
      }
    ],
    "course_code": "DIT101",
    "course_name": "Language-Based Security",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "The requirement for the course is to have successfully completed two year studies within the subject Computer Science or equivalent.",
    "course_content": "This course combines practical and cutting-edge research material. For the latter part, the course's particular emphasis is on the use of formal, or semantic, models of program behaviour for specifying and enforcing security properties. The course consists of lectures, group meetings and project presentations.",
    "assessment": "The course is examined by 3 laborations (U-G), carried out individual or in group, and an individual written report (U/G/VG), which is also presented orally.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U). To pass the course, students must Pass the labs and the project. In order to pass the project part, students need to make a presentation of the project in class and pass the requirements on a written report that documents the project. In order to Pass with Distinction, student must pass the labs and get the grade Pass with Distinction on the project part. In order to Pass with Distinction on the project part, the project must be significantly more substantial than average.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/language-based-security-dit101",
      "international_website": "/en/study-gothenburg/language-based-security-dit101",
      "course_name": "Language-Based Security",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "24 Mar 2025",
      "duration_end": "8 Jun 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86056",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT101",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The course covers the principles of programming language-based techniques for computer security.\nThe goal is;\n1) Understanding such applicaiton-level attacks as race conditions, buffer overruns, covert channels, and code injection.\n2)\nMastering the principles behind such language-based protection\ntechniques as static analysis, program transformation, and reference\nmonitoring.\nThe dual perspective of attack vs. protection is threaded through the lectures, laboratory assignments, and projects.",
      "prerequisites_and_selection": {
        "entry_requirements": "Successfully completed two year studies within the subject Computer Science or equivalent. Applicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "30 October 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Describe stages of the design process; Describe methods for working with interaction design; Describe the similarities and differences of different design methods; Describe considerations for involving users in the design process; Explain the difference between the methods employed in craftsmanship, traditional design, and modern design",
        "competence_and_skills": "Design technology with regards to users; Modify design methods to fit the context and needs of users; Identify needs and requirements for users; Develop and describe new design methods; Plan design projects with respect to design goals, stakeholders' requirements, and available resources and expertise; Conduct work in an inter-cultural environment (including both cultural and educational backgrounds)",
        "judgement_and_approach": "Analyze designs taking into account the needs of users; Make an informed evaluation of the ethical and societal impacts of a design; Criticize designs and design processes with respect to the methods used; Identify ethical and social dilemmas in interaction design research and practice; Reflect on your own design process objectively; Design with regards to aesthetical issues of interaction"
      }
    ],
    "course_code": "DIT104",
    "course_name": "Interaction design methodology",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course the student must have successfully completed a bachelor thesis course, e.g. DIT561. In addition, the student must have successfully completed a 7,5 credit course in Human-computer interaction, e.g. DIT095 or TIG091.",
    "course_content": "The course introduces basic design methodology in interaction design. The course consists of several smaller exercises, a group project, and an individual examination. Theory is combined with practical training to give students practice in working systematically with the design of computational things and systems. Training in specific design methods is provided through exercises and the group project while meta methods such as iterative design and user centered design are aspects of the home exam.",
    "assessment": "The student is graded through a group project (3 hec) and an individual take-home examination (4,5 hec). The take home examination includes written assignments related to literature and to the group project.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). To pass the course, students must receive a passing grade in both modules. The grade for the entire course will be determined by the take home examination.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/interaktionsdesignmetodologi-dit104",
      "international_website": "/en/study-gothenburg/interaction-design-methodology-dit104",
      "course_name": "Interaction design methodology",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "2 Sep 2024",
      "duration_end": "3 Nov 2024",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18655",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT104",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course introduces the basic design methodology in interaction design. The course consists of several smaller exercises, a group project, and an individual examination.\nTheory is combined with practical training to give students practice in working systematically with the design of computational things and systems. Training in specific design methods is provided through exercises and the group project while meta methods such as iterative design and user centered design are aspects of the home exam.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course the student must have succesfully completed a bachelor thesis course, e.g. DIT561. In addition, the student must have succesfully completed a 7,5 credit course in Human-computer interaction, e.g. DIT095 or TIG091.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "12 August 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Explain how computational technology can be used for design of interactive systems; Explain human cognition and motor skills; Explain how human cognition and motor skills can guide the design and evaluation of tangible user interfaces; Explain theories of tangible interaction",
        "competence_and_skills": "Design and realize interactive prototypes using tangible interface components; Choose appropriate and economic use of advanced components and corresponding techniques; Reflect on the relation between spatiality, form, and temporality in tangible interaction design",
        "judgement_and_approach": "Criticize and discuss computer-based tangible artifacts; Question in which way computational technology is shaping our present and future society and way of life; Reflect on sustainability issues such as energy consumption and material waste caused by novel computational systems and devices"
      }
    ],
    "course_code": "DIT107",
    "course_name": "Tangible interaction",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course the student must have a Bachelor degree of 180 hec. Special requirements are the course TIA108 Prototyping in Interaction Design 7.5 credits and a course in Human-Computer Interaction (TIG095) 7.5 credits or the equivalent. To be eligible for this course as a programme student in the Computer Science Bachelor ́s Programme, N1COS, the student must have passed at least 90 credits in programme courses and the addditional courses TIG095 Human Computer Interaction 7.5 credits and TIA108 Prototyping in Interaction Design 7.5 credits or the equivalent. DEPARTMENT OF COMPUTER SCIENCE AND ENGINEERING DIT107 Tangible interaction, 7.5 credits Tangible interaction, 7,5 högskolepoäng Second Cycle Main field of studiesSpecialization Interaction DesignA1F, Second cycle, has second-cycle course/s as entry requirements Computer Science-Interaction DesignA1F, Second cycle, has second-cycle course/s as entry requirements",
    "course_content": "Tangible interaction is based on physical interfaces that are either specifically developed for one system or for those that in new ways, allows interaction with computer systems. The course puts the skills and knowledge acquired in the prototyping course into an applied context. Tangible interaction deals with computational technology and services and offers both theoretical and practical educational modalities. Lectures will present theory and development of tangible interaction and draws from research and commercial practice. Technologies such as sensors, actuators and smart materials are presented from a perspective of human interaction and use.",
    "assessment": "The course is examined through two modules: 1. Project 4 credits (U-VG) and 2. Individual Written Home Essay 3.5 credits (U-VG) Assessment is based on a group project performed in the studios, as well as an individual home essay. A student who has failed the examination twice has the right to change examiners, if it is possible. A written application should be sent to the Department.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). A pass grade requires passing grades on both sub-courses. The grade is a weighted combintion of the sub-course grades.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/tangible-interaction-dit107",
      "international_website": "/en/study-gothenburg/tangible-interaction-dit107",
      "course_name": "Tangible interaction",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "20 Jan 2025",
      "duration_end": "23 Mar 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86049",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT107",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "Tangible interaction is based on physical interfaces that are either specifically developed for one system or for those that in new ways, allows interaction with computer systems.\nThe course puts the skills and knowledge acquired in the prototyping course into an applied context. Tangible interaction deals with computational technology and services and offers both theoretical and practical educational modalities. Lectures will present theory and development of tangible interaction and draws from research and commercial practice. Technologies such as sensors, actuators and smart materials are presented from a perspective of human interaction and use.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course the student must have a Bachelor degree of 180 hec. Special requirements are the course TIA108 Prototyping in Interaction Design 7.5 credits and a course in Human-Computer Interaction (TIG095) 7.5 credits or the equivalent.\nTo be eligible for this course as a programme student in the Computer Science Bachelor és Programme, N1COS, the student must have passed at least 90 credits in programme courses and the addditional courses TIG095 Human Computer Interaction 7.5 credits and TIA108 Prototyping in Interaction Design 7.5 credits or the equivalent.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "23 September 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Describe problems/challenges in the studied area of research, including challenges related to system design, networking and advanced programming techniques; Identify critical issues and existing technological limitations in the state of the art in computer systems and networks",
        "competence_and_skills": "Find the most relevant sources in the scientific literature, possibly with other complementary industrial sources; Review the relevant sources; Structure and write a report based on the relevant sources and their reviews",
        "judgement_and_approach": "Analyze the performance of studied solutions using numerical analysis and formal proofs; Assess the impact that different solutions can have on an application or a system; Critically analyze problems of modern networks and computer systems"
      }
    ],
    "course_code": "DIT147",
    "course_name": "Technical writing in computer systems and networks",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course students should have successfully completed 120 credits of studies within computer science or equivalent, including the following courses (or other, equivalent courses): DIT423 Computer communication, DIT401 Operating Systems, and DIT240 Distributed Systems. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The student examines the current state of the art in a specific research area and writes a report. The report should be based on published works within a research area connected to the field of computer systems and networks. Each research area and a number of related topics are presented to the student in introductory lectures. As a student you will work in a group with a few other students. Each group will be allocated a topic for the report that is to be written. The report shall be presented orally at a seminar. The student is also required to review publications and the reports of other groups. There will be lectures, seminars and workshops in the areas of scientific writing, reviewing and presentation as well as in ethics.",
    "assessment": "To pass the course, the student must: (1) write a report for a given topic in a specific research area, (2) complete review assignments and (3) make an oral presentation of the report.",
    "grading": "The grading scale comprises: Pass (G) and Fail (U). In order to get the grade Pass for the full course the student must Pass the written assignment, the presentation part and get the grade Pass on the extended written report. In order to get the grade Pass with Distinction for the whole course, the student must get the grade Pass with Distinction on the extended written report and pass both the assignment part and the presentation part.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/teknisk-rapportskrivning-inom-datorer-natverk-och-system-dit147",
      "international_website": "/en/study-gothenburg/technical-writing-in-computer-systems-and-networks-dit147",
      "course_name": "Technical writing in computer systems and networks",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "2 Sep 2024",
      "duration_end": "3 Nov 2024",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18656",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT147",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "During the course the students will get the chance to examine the current state of the art in a specific research area and write a report about it. The report should be based on published works within a research area connected to the field of computer systems and networks. Each research area and a number of related topics are presented to the student in introductory lectures.\nThe students will be working in groups, each group will be allocated a topic for the report that is to be written. The report shall be presented orally at a seminar. The students are also required to review publications and the reports of other groups. There will be lectures, seminars and workshops in the areas of scientific writing, reviewing and presentation as well as in ethics.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course the student must successfully have completed 120 credits of studies within computer science or equivalent, including the following courses (or other equivalent courses):\n- DIT423 Computer communication,- DIT401 Operating Systems- DIT240 Distributed Systems.\nThe studentmust also prove the following knowledge of English:\nEnglish 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "2 September 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "formulate requirements for embedded systems with strict constraints on computational delay and periodicity; categorize and describe the different layers in a system architecture for embedded real-time systems; describe the principles and mechanisms used for designing run-time systems and  communication networks for real-time applications; describe how the general principles in real-time programming are implemented in different high-level programming languages",
        "competence_and_skills": "construct concurrently-executing tasks (software units) for real-time applications  that interface to hardware devices (sensors/actuators); apply the basic analysis methods used for verifying the temporal correctness of a set of executing tasks",
        "judgement_and_approach": " reflect and argue in writing on ethical aspects regarding the choice of system implementation"
      }
    ],
    "course_code": "DIT162",
    "course_name": "Real-Time Systems",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible to the course, the student should have completed the following courses, or equivalent:\n\nDIT391 Principles of Concurrent Programming, 7.5 credits\nDIT401 Operating Systems, 7.5 credits\nDIT151 Machine Oriented Programming, 7.5 credits\n",
    "course_content": "This course is intended to give basic knowledge about methods for the design and analysis of real-time systems. Examples of real-time systems are control systems for cars, aircraft and space vehicles as well as computer games and multimedia applications.\n\nAn embedded system is a computer system designed to perform one or a few dedicated functions. It is embedded in the sense that it is part of a complete device, often including electrical hardware and mechanical parts. For reasons of safety and usability, some embedded systems have strict constraints on non-functional behavior such as computational delay and periodicity. Such systems are referred to as real-time systems. Examples of real-time systems are control systems for cars, aircraft and space vehicles as well as computer games and multimedia applications. This course is intended to give basic knowledge about methods for the design and analysis of real-time systems.\n\nDue to the extremely high costs associated with late discovery of problems in embedded systems, it is important to follow a good design methodology during the development of the software and hardware. One means for that is to use a system architecture that offers good component abstractions and facilitates simple interfacing of components. The system architecture philosophy dictates that the software of an embedded system is organized into multiple concurrently-executing tasks, where each task (or group of tasks) implements a specific functionality in the system. This approach allows for an intuitive way of decomposing a complex system into smaller software units that are simple to comprehend, implement and maintain.\n\nThe software environment used in the course is based on the C programming language, enhanced with a software library that provides support for programming of concurrent tasks with timing (delay and periodicity) constraints. To that end, a main objective of the course is to demonstrate how the enhanced C programming language is used for implementing communication/synchronization between tasks, resource management and mutual exclusion. Since other programming languages uses monitors or semaphores to implement these functions, the course also contains a presentation of such techniques. In addition, the course demonstrates how to use low-level programming in C to implement interrupt-driven interaction with hardware devices. To demonstrate the general principles in real-time programming, the course also gives examples of how these techniques are implemented in other programming languages, such as Ada and Java.\n\nIn order to execute a program containing concurrent tasks there is a run-time system (real-time kernel) that distributes the available capacity of the microprocessor(s) among the tasks. The course shows how a simple run-time system is organized. The run-time system determines the order of execution for the tasks by means of a scheduling algorithm. To that end, the course presents techniques based on cyclic time-table based scheduling as well as scheduling techniques using static or dynamic task priorities. In addition, protocols for the management of shared hardware and software resources are presented. Since many contemporary real-time applications are distributed over multiple computer nodes, the course also presents topologies and medium access mechanisms for some commonly-used communication networks.\n\nIn real-time systems, where tasks have strict timing constraints, it is necessary to make a pre-run-time analysis of the system schedulability. The course presents three different analysis methods for systems that schedule tasks using static or dynamic priorities: utilization-based analysis, response-time analysis, and processor-demand analysis. In conjunction with this, the course also gives an account on how to derive the maximum resource requirement (worst-case execution time) of a task.",
    "assessment": "The student is evaluated by means of a written exam and a compulsory laboratory assignment.\n\nIf a student, who has failed the same examined component twice, wishes to change examiner before the next examination, a written application shall be sent to the department responsible for the course and shall be granted unless there are special reasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance).\n\nIn cases where a course has been discontinued or has undergone major changes, the student shall normally be guaranteed at least three examination occasions (including the ordinary examination) during a period of at least one year from the last time the course was given.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).\nA Pass grade (G) for the entire course requires at least a Pass grade for all sub-courses.\n\nA Pass with Distinction (VG) grade for the entire course requires a VG grade for all sub-courses.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/realtidssystem-dit162",
      "international_website": "/en/study-gothenburg/real-time-systems-dit162",
      "course_name": "Real-Time Systems",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "20 Jan 2025",
      "duration_end": "23 Mar 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86031",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT162",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course is intended to give basic knowledge about methods for the design and analysis of real-time systems. Examples of real-time systems are control systems for cars, aircraft and space vehicles as well as computer games and multimedia applications.\nAn embedded system is a computer system designed to perform one or a few dedicated functions. It is embedded in the sense that it is part of a complete device, often including electrical hardware and mechanical parts. For reasons of safety and usability, some embedded systems have strict constraints on non-functional behavior such as computational delay and periodicity. Such systems are referred to as real-time systems. Examples of real-time systems are control systems for cars, aircraft and space vehicles as well as computer games and multimedia applications. This course is intended to give basic knowledge about methods for the design and analysis of real-time systems",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible to the course, the student should have completed the following courses, or equivalent:\n- DIT391 Principles of Concurrent Programming, 7.5 credits- DIT401 Operating Systems, 7.5 credits- DIT151 Machine Oriented Programming, 7.5 credits",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "30 October 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "demonstrate knowledge about the terminology of scheduling, dependability and complexity theory; describe the principles and mechanisms used for scheduling of task execution and data communication in real-time systems",
        "competence_and_skills": "formulate requirements for computer systems for time and safety critical applications; design realtime systems and apply techniques to verify whether the realtime requirements are met or not; derive the theoretical performance limitations of a given real-time system",
        "judgement_and_approach": "reason about advantages and disadvantages regarding the choice of the optimal design for a real-time systems given certain conditions"
      }
    ],
    "course_code": "DIT173",
    "course_name": "Dependable Real-Time Systems",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course students should have successfully completed courses corresponding to 120 higher education credits within the subject Computer Science or equivalent. In addition, a pass grade in the preparatory course DIT162 Real-Time systems, 7.5 credits, is required. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "[ 'Background: motivation for; and definition of; real-time computing systems.', 'Characteristics of real-time systems: application constraints; design methods; task models; run-time mechanisms; architectures.', 'Evaluation of real-time systems: performance measures; evaluation methodologies.', 'Single and multiprocessor scheduling: problem definition; terminology; and algorithms.', 'Complexity theory and NP-completeness in the context of real-time scheduling.', 'Real-time communications: protocols and end-to-end delay guarantees.', 'Fault-tolerance techniques for real-time systems: models; algorithms and architectures.' ]",
    "assessment": "The course is examined by two homework assignments, one in the beginning of the course and the other at the end of the course. For the first homework assignments the student shall implement a dependable software for a distributed real-time system, that is examined by means of documentation and demonstration of the software. For the second homework assignment the student shall solve a set of theoretical problems and document the solutions in a written report that is orally examined. The homework assignments are carried out normally in groups of two students, while the examination and grading of the assignments are individually performed.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U). A Pass grade (G) for the entire course requires at least a Pass grade for all sub-courses. A Pass with Distinction grade (VG) for the entire course requires a VG grade for all sub-courses.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/palitliga-realtidssystem-dit173",
      "international_website": "/en/study-gothenburg/dependable-real-time-systems-dit173",
      "course_name": "Dependable Real-Time Systems",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "24 Mar 2025",
      "duration_end": "8 Jun 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86075",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT173",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course is intended to give a deeper understanding of the problems involved in designing dependable real-time systems based on multiprocessor architectures. Specifically, the course covers the following topics:\nBackground: motivation for; and definition of; real-time computing systems.\nCharacteristics of real-time systems: application constraints; design methods; task models; run-time mechanisms; architectures.\nEvaluation of real-time systems: performance measures; evaluation methodologies.\nSingle and multiprocessor scheduling: problem definition; terminology; and algorithms.\nComplexity theory and NP-completeness in the context of real-time scheduling.\nReal-time communications: protocols and end-to-end delay guarantees.\nFault-tolerance techniques for real-time systems: models; algorithms and architectures.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course students should have successfully completed courses corresponding to 120 higher education credits within the subject Computer Science or equivalent. In addition, a pass grade in the preparatory course DIT162 Real-Time systems, 7.5 credits, is required. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "30 October 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Describe how prototypes are used in interaction design; List the pros and cons with different types of prototypes; Explain what can be learned from a certain prototype and why; Explain what can not be learned from a certain prototype and why",
        "competence_and_skills": "create physical prototypes in various materials, with various techniques; create video prototypes to present a concept or proposal;  create simple sketch prototypes; create digital/physical prototypes; perform basic programming of micro-controllers connected to sensors and actuators; program simple interactive prototypes",
        "judgement_and_approach": "decide which type of prototype to use in order to find out what needs to be learned or tested, taking possible constraints into account, e.g. time and budget;  apply early stage evaluations; incorporate suitable prototypes at the right stages in a design process"
      }
    ],
    "course_code": "DIT176",
    "course_name": "Prototyping in interaction design",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course the student must have a Bachelor degree of 180 credits. Additionally, a course in Human - computer interaction, 7.5 credits, is required.",
    "course_content": "The course gives an introduction to, and practice in, creation of different types of prototypes in Interaction Design. The contents cover both physical prototypes (e.g. paper prototypes, prototyping through controllers and micro-controllers, and prototyping through tinkering and physical modelling) and digital, screen-based prototypes (sketching and video prototypes). The course also gives an understanding of what to test with different prototypes, and when.",
    "assessment": "The course is examined through two modules: 1.Participation in workshops and oral and written presentation of these (4 credits) and 2.Group project report (3.5 credits)",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). In order to pass the course students need to pass both modules.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/prototyping-for-interaktionsdesign-dit176",
      "international_website": "/en/study-gothenburg/prototyping-in-interaction-design-dit176",
      "course_name": "Prototyping in interaction design",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "2 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86046",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT176",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The course gives an introduction to, and practice in, creation of different types of prototypes in Interaction Design. The contents cover both physical prototypes (e.g. paper prototypes, prototyping through controllers and micro-controllers, and prototyping through tinkering and physical modelling) and digital, screen-based prototypes (sketching and video prototypes). The course also gives an understanding of what to test with different prototypes, and when.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course the student must have a Bachelor degree of 180 credits. Additionally, a course in Human - computer interaction, 7.5 credits, is required. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Describe what is a linear program (LP) and an integer linear program (ILP); Describe the geometry of a LP by visualizing it graphically; Describe the relationship between an ILP and its LP relaxation",
        "competence_and_skills": "Formulate a continuous optimization problem as an LP; Formulate a discrete optimization problem as an ILP and relax it to an LP, and recover approximate discrete solution to the original problem from the optimal LP; Solve an LP using the Simplex algorithm; Formulate the dual of an LP and relate it to the original LP; Use LP duality to design optimization algorithms; Formulate discrete optimization problems as a vector program, relax it to an SDP and recover a discrete solution to the original problem",
        "judgement_and_approach": "Recognize which optimization formulation is appropriate to a given problem; Judge which algorithm works efficiently for a given optimization problem"
      }
    ],
    "course_code": "DIT206",
    "course_name": "Discrete optimization",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "7,5 credits programming in high level language like Java, Python etc\n7,5 credits basic course in calculus/analysis",
    "course_content": "The course gives an introduction to modelling various optimization problems using linear programming (LP) and integer linear programming (ILP). The Simplex algorithm to solve LPs is described and analysed. The LP relaxations of ILPs are studied and analysed to design approximation algorithms. The duality theory of linear programs is studied and used to design approximation algorithms. Vector programs to model discrete optimization problems are described and relaxed to semi-definite programs (SDPs)",
    "assessment": "The course is examined by a written exam (assignments could be used for bonus points).",
    "grading": "Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/diskret-optimering-dit206",
      "international_website": "/en/study-gothenburg/discrete-optimization-dit206",
      "course_name": "Discrete optimization",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "20 Jan 2025",
      "duration_end": "23 Mar 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86007",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT206",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The course gives an introduction to modelling various optimization problems using linear programming (LP) and integer linear programming (ILP). The Simplex algorithm to solve LPs is described and analysed. The LP relaxations of ILPs are studied and analysed to design approximation algorithms. The duality theory of linear programs is studied and used to design approximation algorithms. Vector programs to model discrete optimization problems are described and relaxed to semi-definite programs (SDPs).",
      "prerequisites_and_selection": {
        "entry_requirements": "- 7,5 credits programming in high level language like Java, Python etc- 7,5 credits basic course in calculus/analysis- 7,5 credits basic course in linear algebra\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 September 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "describe and apply advanced algorithms, often at a research level, and processes used to create computer graphics in 3D-games and/or movies",
        "competence_and_skills": "implement advanced algorithms used to generate real-time renderings and photo realistic renderings, or GPU algorithms, as part of a project; present and describe one or a few advanced algorithms used in computer graphics",
        "judgement_and_approach": "judge and select suitable algorithms and methods for specific advanced sub problems in computer graphics and/or GPU programming"
      }
    ],
    "course_code": "DIT227",
    "course_name": "Advanced Computer Graphics",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course, students should have successfully completed courses corresponding to 120 hec within the subject of Computer Science, Mathematics, Software Engineering, or equivalent, including 7.5 hec course in Computer Graphics (DIT224 or equivalent). Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The course aims to deepen and broaden the knowledge about three dimensional computer graphics. It is a follow-up course to an introductory course in computer graphics, that gives the students a chance to dig deeper into particular subjects and also to perform a project. There will be compulsory seminars, where more details on a research-level will be presented for a selection of topics, e.g.: ambient occlusion, hair rendering, GPGPU applications, ray tracing and global illumination, advanced path tracing, GPU-ray tracing, hard and soft shadows, real-time indirect illumination, spherical harmonics, etc.",
    "assessment": "The course is examined with a programming project which is presented orally and with an oral presentation of a research paper. The project, and the oral presentation, is performed in a group of two students or individually. To pass the course, the student must also: Attend 80% of the seminars Submit written discussion points for three of the seminars The course includes a number of optional homework assignments that can give bonus points that count toward the final grade.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U). A Pass grade (G) for the entire course requires at least a Pass grade for all sub-courses and that the student has fulfilled all the other mandatory parts. To be awarded Pass with Distinction (VG) for a full course, the student must, in addition, receive the grade VG on the sub-course Project.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/avancerad-datorgrafik-dit227",
      "international_website": "/en/study-gothenburg/advanced-computer-graphics-dit227",
      "course_name": "Advanced Computer Graphics",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "24 Mar 2025",
      "duration_end": "8 Jun 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86069",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT227",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The course aims to deepen and broaden the knowledge about three dimensional computer graphics.\nIt is a follow-up course to an introductory course in computer graphics, that gives the students a chance to dig deeper into particular subjects and also to perform a project.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course, students should have successfully completed courses corresponding to 120 hec within the subject of Computer Science, Mathematics, Software Engineering, or equivalent, including 7.5 hec course in Computer Graphics (DIT224 or equivalent).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "30 October 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "explain the functioning of finite automata; explain the principles of LL and LR parsing; explain the concept of compiler correctness",
        "competence_and_skills": "define and implement abstract syntax; define the lexical structure of programming languages by using regular expressions, and implement lexical analyzers by using standard tools; define the syntax of programming languages by using context-free grammars and  implement parsers by using standard tools; write simple code generators; apply the technique of syntax-directed translation and its efficient implementation in  their chosen programming language; formulate typing rules and implement type checkers for functional and imperative  languages; formulate operational semantic rules and implement interpreters for functional and imperative languages",
        "judgement_and_approach": " judge about programming language design issues as for example with the respect to  efficiency and usability"
      }
    ],
    "course_code": "DIT231",
    "course_name": "Programming Language Technology",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "The requirements for the course is to have successfully completed courses corresponding to 60 hec in the subject of Computer Science, including 7.5 hec in programming (for example DIT143 Functional programming, DIT953 Objektorienterad programmering and design, or equivalent); 7.5 hec in data structures (for example DIT961 Data structures, DIT725 Logic, DIT231 Programming Language Technology, 7.5 credits, algorithms and data structures or equivalent). English B level or English proficiency equivalent to IELTS 6.5 no part under 5.5 or TOEFL 575 p, TWE score 4.5 is also required.",
    "course_content": "The aim of the course is to give understanding of how programming languages are designed, documented, and implemented. The course covers the basic techniques and tools needed to write interpreters, and gives a summary introduction to compilation as well. The students will learn about grammars when writing the syntax analysis and about type systems when implementing the type checker. When implementing the interpreter and compiler the students will learn about practical implementation concerns as well as the theory of formal semantics.",
    "assessment": "The course is examined through an individual written exam in an examination hall at the end of the course and laboratory assignments carried out individually or in pairs.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/programspraksteknik-dit231",
      "international_website": "/en/study-gothenburg/programming-language-technology-dit231",
      "course_name": "Programming Language Technology",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "4 Nov 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18659",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT231",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The aim of the course is to give understanding of how programming languages are designed, documented, and implemented.\nThe course covers the basic techniques and tools needed to write interpreters, and gives a summary introduction to compilation as well.\nThose who have passed the course should be able to: Define the lexical structure of programming languages by using regular expressions, explain the functioning of finite automata, and implement lexical analysers by using standard tools. Define the syntax of programming languages by using context-free grammars, explain the principles of LL and LR parsing, and implement parsers by using standard tools. Define and implement abstract syntax. Master the technique of syntax-directed translation and its efficient implementation in their chosen programming language. Formulate typing rules and implement type checkers. Formulate operational semantic rules and implement interpreters. Write simple code generators.",
      "prerequisites_and_selection": {
        "entry_requirements": "The requirements for the course is to have successfully completed courses corresponding to 60 credits in the subject of Computer Science, including\n7.5 credits in programming (for example DIT142 Functional programming, DIT952 Objektorienterad programmering and design, or equivalent);\n7.5 credits in data structures (for example DIT960 Data structures, DIT725 Logic, algorithms and data structures or equivalent).\nEnglish: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "19 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "describe several kinds of type systems, their underlying design principles, and their semantic foundation",
        "competence_and_skills": "program in a dependently typed functional programming language; prove theorems in a dependently typed programming language using the propositions-as-types principle; use deduction formalisms to present type systems and operational semantics of programming languages",
        "judgement_and_approach": "critically analyse type systems and prove properties about them"
      }
    ],
    "course_code": "DIT235",
    "course_name": "Types for Programs and Proofs",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible to the course, the student should have successfully completed 120 credits of studies in computer science or mathematics, or equivalent. Specifically, a successfully completed 7.5 credit course in discrete mathematics (e.g., DIT980 Discrete Mathematics for Computer Scientists, or equivalent) and a successfully completed 7,5 credit course in functional programming (e.g. DIT143 Functional Programming, or equivalent is required. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The development of powerful type systems is an important aspect of modern programming language design. This course provides an introduction to this area. In particular it introduces the notion of dependent type, a type which can depend on (is indexed by) values of another type, for example, the type of vectors indexed by its length. Dependent types are versatile. Through the Curry-Howard identification of proposition and types virtually any property of a program can be expressed using dependent types. The aim of the course is to give a solid and broad foundation in type systems for programming languages, and also give examples of type-based technologies in computer science. introduction to lambda calculus and simple type theory introduction to operational semantics and type systems dependent type theory the Curry-Howard identification of propositions as types programming in Agda, a proof assistant presentation of advanced topics in type systems",
    "assessment": "The course is examined by an oral presentation normally performed in pairs, and by an individual take home examination. In addition, to receive a higher grade than G/Pass the student has to pass an individual oral examination. The take home exam includes both theoretical problems and programming assignments. For the oral presentation, the student can select either a research paper or a chapter in the course book involving applications of type systems not covered in the lectures. If the take-home exam is handed in too late it is failed. An oral examination is used as reexamination. If a student, who has failed the same examined component twice, wishes to change examiner before the next examination, a written application shall be sent to the department responsible for the course and shall be granted unless there are special reasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance). In cases where a course has been discontinued or has undergone major changes, the student shall normally be guaranteed at least three examination occasions (including the ordinary examination) during a period of at least one year from the last time the course was given.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). The grade on the course is the same as the grade on the sub-course 'Take home examination'.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/typer-for-program-och-bevis-dit235",
      "international_website": "/en/study-gothenburg/types-for-programs-and-proofs-dit235",
      "course_name": "Types for Programs and Proofs",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "2 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86034",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT235",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The development of powerful type systems is an important aspect of modern programming language design. This course provides an introduction to this area. In particular it introduces the notion of dependent type, a type which can depend on (is indexed by) values of another type, for example, the type of vectors indexed by its length. Dependent types are versatile. Through the Curry-Howard identification of proposition and types virtually any property of a program can be expressed using dependent types. The aim of the course is to give a solid and broad foundation in type systems for programming languages, and also give examples of type-based technologies in computer science.\nintroduction to lambda calculus and simple type theory\nintroduction to operational semantics and type systems\ndependent type theory\nthe Curry-Howard identification of propositions as types\nprogramming in Agda, a proof assistant\npresentation of advanced topics in type systems",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible to the course, the student should have successfully completed 120 credits of studies in computer science or mathematics, or equivalent. Specifically, a successfully completed 7.5 credit course in discrete mathematics (e.g., DIT980 Discrete Mathematics for Computer Scientists, or equivalent) and a successfully completed 7,5 credit course in functional programming (e.g. DIT143 Functional Programming, or equivalent is required.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "apply of basic concepts of distributed systems and their challenges, naming and synchronization of systems, consistency and replication, and fault tolerance in distributed systems; describe applications of distributed systems and the mechanisms these use to provide their services; discuss and analyse the challenges and requirements of different approaches; compare and summarize the strength and weaknesses associated with the individual mechanisms",
        "competence_and_skills": "develop and evaluate small-scale distributed systems using fundamental  mechanisms; demonstrate software developments in advanced settings including unreliable links and systems as well as limited bandwidth; demonstrate experimental results in oral and written presentation",
        "judgement_and_approach": "describe and analyse existing and new methods for distributed systems design. In  particular, the systems ability for scalability and fault tolerance; discuss and value the social and ethical aspects of distributed systems and their applications"
      }
    ],
    "course_code": "DIT240",
    "course_name": "Distributed Systems",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "The requirement for the course is to have successfully completed courses corresponding to 120 hec within the subject Computer Science or equivalent. Within the 120 hec the following courses are required; DIT663 Computer Networks, 7.5 hec or DIT420 Computer Communication, 7.5 hec (or equivalent) DIT400 Operating systems, 7.5 hec or DIT390 Concurrent programming, 7.5 hec (or equivalent) COMPUTER SCIENCE AND ENGINEERING DIT240 Distributed Systems, 7.5 credits",
    "course_content": "[ 'Naming', 'Mutual Exclusion and Election', 'Clocks and Time', 'Consistency and Replication', 'Fault Tolerance in Distributed Systems', 'Selected Applications in Distributed Systems' ]",
    "assessment": "The course is examined on basis of a written exam done individually in an examination hall (6.0 hec) and the home assignment and Laboratory work, each done in a group of two, (total 1.5 hec) are presented both in written and oral form.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U). In order to be awarded the grade Pass (G) for the entire course, the student must get the grade Pass on both the sub-courses. In order to get the grade Pass with Distinction (VG) for the entire course, the student must get the grade Pass on the sub-course Written exam and get the grade Pass on the sub-course Laboratory work.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/distribuerade-system-dit240",
      "international_website": "/en/study-gothenburg/distributed-systems-dit240",
      "course_name": "Distributed Systems",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "4 Nov 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18661",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT240",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "Distributed systems are built by components/processes that cooperate using computer communication.\nThe overall aim of the course is to provide an understanding of the challenges you are confronted with when developing such systems as well as the benefits gained from such systems.\nThus this course serves as the basic for further study within the area.",
      "prerequisites_and_selection": {
        "entry_requirements": "Successfully completed courses corresponding to 120 credits within the subject Computer Science or equivalent. Within the 120 credits the following courses are required;\n- DIT663 Computer Networks, 7.5 credits or DIT420 Computer Communication, 7.5 credits (or equivalent)- DIT400 Operating systems, 7.5 credits or DIT390 Concurrent programming, 7.5 credits (or equivalent)\nApplicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "19 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "know and use appropriate academic technical terminology for games; identify the ethical implications of a game's design",
        "competence_and_skills": "show an understanding of different types and approaches to classifying games; show an understanding of different academic approaches to researching games and gaming; be able to choose and combine different academic approaches in order to analyze and interpret games; integrate scholarly literature in the exploration of the academic context of a game",
        "judgement_and_approach": "analyze games given a specific research question, research stance, and academic vocabulary;  describe games given a specific focus and showing an adequate use of academic game terms; make comparisons between games or parts of games through the use of academic game terms; analyze games in relation to various intended uses; analyze games from several different gaming preferences"
      }
    ],
    "course_code": "DIT248",
    "course_name": "An introduction to Game Research",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "Bachelor degree of 180 higher educational credits or 60 higher educational credits in the main field of study of Computer Science.",
    "course_content": "The course provides an overview of games as well as theoretical concepts and frameworks that can be used for their analysis and evaluation. The course includes a particular focus on video games, modern board games, and tabletop roleplaying games. We also look at transmedial aspects, and gaming forms that don't fit neatly into these categories. Students formulate several research questions of their choosing around games, and during the course they develop the skills required to provide answers to those questions. The course introduces three key research perspectives that are useful for game studies. We make use of the systemic perspective, which explores how games work. We look at the experiential perspective, which explores how games make us feel. And we look at the critical perspective, which focuses on what games are trying to say. The course also has a strong focus on ‘learning by playing’, recognising that games are the primary text of their discipline. Students taking this course will have an opportunity to try out tabletop roleplaying for themselves, as well as a chance to play a curated selection of modern board games. Course participants put together an academic paper and poster as part of the course; peer review the papers of their fellow students; and present their papers to their colleagues at an end-of-course symposium.",
    "assessment": "The course is examined through several written submissions and a mandatory presentation at the end of the course. Participation in the course, as evidenced through peer reviewing and engagement with scheduled game exercises, also contributes to an individual's grade.",
    "grading": "Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/introduktion-till-spelvetenskap-dit248",
      "international_website": "/en/study-gothenburg/an-introduction-to-game-research-dit248",
      "course_name": "An introduction to Game Research",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "2 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86044",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT248",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "Games have been a big part of human culture since ancient times. During the years they have evolved in to many different forms and serve many different target groups, not least since the introduction of computer games. This course provides an overview of games in all their forms as well as theoretical concepts and frameworks to analyze games. The course is divided into four successive parts that consider different forms of games and different perspectives of gaming.\nThe first part looks at games as systems and focus on board games and card games as well as introduces general concepts to describe games and gaming. The second part transitions over to how players perceive and immerse themselves into games, using role-playing and larps to highlight the play experience as a perceptual stance. The third part highlights how different media forms impacts on games and gaming by focusing on computer games and online games. The final part examines how the boundaries between games and other activities can be obscured by the game design and how games can be used for other purposes than to entertain, for example to criticize, influence, or teach.\nEach part introduces theoretical concepts and frameworks through academic texts and builds on the previous part.",
      "prerequisites_and_selection": {
        "entry_requirements": "Bachelor degree of 180 higher educational credits or 60 higher educational credits in the main field of study of Computer Science.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "9 December 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "apply important design and analysis techniques for algorithms, in particular, ways to approach NP-complete problems; describe current research on algorithms",
        "competence_and_skills": "apply design and analysis techniques to solve new problems that may arise in various applications; explain complex algorithms and their proofs in written form",
        "judgement_and_approach": "find connections between algorithmic problems and turn them into formal reductions; perform more complex analysis of algorithms, in particular, analyze the worst case and expected time complexities and error probabilities for randomized algorithms"
      }
    ],
    "course_code": "DIT251",
    "course_name": "Algorithms, advanced course",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "The requirement for the course is to have successfully completed courses corresponding to 120 hec within the subject Computer Science or equivalent, including successful completion of DIT093 Algorithms, 7.5 hec (or equivalent). Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The course covers the following topics: approximation algorithms and approximation schemes for NP-complete problems and their analysis, use of linear programming, in particular for approximation, network flow with some complex applications, randomized algorithms and their analysis by appropriate random variables, helpful input structures like tree structures and input parameters.",
    "assessment": "The course is examined by hand-in exercises and a final take-home exam. If a student, who has failed the same examined component twice, wishes to change examiner before the next examination, a written application shall be sent to the department responsible for the course and shall be granted unless there are special reasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance). In cases where a course has been discontinued or has undergone major changes, the student shall normally be guaranteed at least three examination occasions (including the ordinary examination) during a period of at least one year from the last time the course was given.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). The grading scale comprises Fail (U), 3, 4 or 5.  To pass the course, all mandatory components must be passed. To earn a higher grade than Pass, a higher weighted average from the grades of the components is required.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/algoritmer-fortsattningskurs-dit251",
      "international_website": "/en/study-gothenburg/algorithms-advanced-course-dit251",
      "course_name": "Algorithms, advanced course",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "3 Nov 2025",
      "duration_end": "18 Jan 2026",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86065",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT251",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course will be covering the following topics:\n- approximation algorithms and approximation schemes for NP-complete problems, and their analysis,- use of linear programming, in particular for approximation,\n- network flow with some complex applications,\n- randomized algorithms and their analysis by appropriate random variables,\n- helpful input structures like tree structures and input parameters.",
      "prerequisites_and_selection": {
        "entry_requirements": "The requirement for the course is to have successfully completed courses corresponding to 120 creditswithin the subject Computer Science or equivalent, including successful completion of DIT093 Algorithms, 7.5 credits(or equivalent).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "17 December 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "explain advanced type system features, such as type classes, generalized algebraic datatypes, functors, monads and monad transformers, and relate them to each other",
        "competence_and_skills": "design embedded domain specific languages (EDSLs); explain and exemplify their abstract and concrete syntax and semantics; and implement them in Haskell as combinator libraries use specification-based development techniques to formulate and test properties about programs reason about the correctness of functional programs, and transform them on the basis of such reasoning analyse and extend Haskell programs which use advanced type system features",
        "judgement_and_approach": "discuss the above topics (i.e., type system features, EDSLs, specification-based techniques and correctness), and how they relate to each other"
      }
    ],
    "course_code": "DIT260",
    "course_name": "Advanced Functional Programming",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible to the course, the student should have successfully completed 120 credits of studies in computer science or equivalent. Specifically, the following courses are required, or equivalent: DIT143 Functional Programming, 7.5 credits, DIT440 Introduction to Functional Programming, 7.5 credits, DIT980 Discrete Mathematics for Computer Scientists, 7.5 credits, DIT231 Programming Language Technology, 7.5 credits.",
    "course_content": "The aim of the course is to explore the powerful mechanisms that functional programming languages offer to solve real problems and structure larger programs. The focus lies on library design and the concept of embedded languages. Realistic functional programs must also handle changes in state, exceptions, backtracking and other 'non-functional' behaviors. The course will also present some recent research which can make the contents of the course vary to some degree. The programming language used in the course is Haskell.",
    "assessment": "The course is examined by 2-3 programming laborations (U-VG) normally done in pairs during the course, and an individual exam (U-VG) given in an examination hall at the end.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U). A Pass grade (G) for the entire course requires at least a Pass grade for all sub-courses.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/avancerad-funktionell-programmering-dit260",
      "international_website": "/en/study-gothenburg/advanced-functional-programming-dit260",
      "course_name": "Advanced Functional Programming",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "20 Jan 2025",
      "duration_end": "23 Mar 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86014",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT260",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The aim of the course is to explore the powerful mechanisms that functional programming languages offer to solve real problems and structure larger programs. The focus lies on library design and the concept of embedded languages.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course, students should have successfully completed two years of an education aimed at a Bachelor's degree within Computer Science or equivalent. The courses DIT142 Functional programming, MMGD10 Introductory Discrete Mathematics and at least one of the courses DIT230 Programming language technology or DIT331 programming paradigms or equivalent are required. Applicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "10 October 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Distinguish between concurrency and parallelism; Give an overview of approaches to parallelism in functional programming languages in the scientific literature",
        "competence_and_skills": "Write, modify and test parallel functional programs, to run on a variety of architectures such as shared memory multiprocessors, networks of commodity servers, and GPUs; Interpret parallelism profiles and address bottlenecks",
        "judgement_and_approach": "Identify when using a functional language may be appropriate for solving a parallel programming problem;  Select an appropriate form of parallel functional programming for a given problem, and explain the choice"
      }
    ],
    "course_code": "DIT261",
    "course_name": "Parallel Functional Programming",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "The requirement for the course is to have successfully completed two years within the subject Computer Science or equivalent. The course participants must have completed an introductory course in Functional Programming, preferably using Haskell or Erlang (Examples at GU are DIT440 Introduction to Functional Programming and DIT142 Functional Programming). Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The course introduce the principles and practice of parallel programming in a functional programming language. In this course, the term paralle programming means using multiple hardware cores of processors in order to gain speed. The course covers approaches to parallel fuctional programming in both Haskell and Erlang. It covers curret research on these topics, and relies heavily on scientific papers as its source materials. - Advantages of functional approaches to parallelism: immutability, absence of data races, determinism. - Profiling parallel functional programs: granularity, bottlenecks, locality, data-dependencies. - Parallel functional algorithms: divide-and-conquer. - Approaches to expressing parallelism in Haskell: the Eval monad, the Par monad, parallel strategies, skeletons, data parallelism. - Functional approaches to GPU programming - Parallelisation and distribution for Erlang. Scalability. Handling errors in a massively parallel system. - Case studies of industrial parallel functional programming, such as map-reduce and scalable no-SQL databases.",
    "assessment": "An individual written examination taken in an examination hall and two compulsory laboratory exercises. The laboratory exercises are normally done in groups of 2. A student who has failed the examination twice has the right to request of the department a change of examiner. The request is to be in writing and submitted as soon as possible. The department is to grant such a request without delay. In cases where a course has been discontinued or major changes have been made a student should be guaranteed at least three examination occasions (including the ordinary examination occasion) during a time of at least one year from the last time the course was given.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U). In order to be awarded a Pass (G) for a full course, the laboatory assignments must be approved and a passing mark must be obtained in the written exam. To be awarded Pass with Distinction (VG), the student must receive a VG in the written exam and the laboratory assignments must be approved.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/parallell-funktionell-programmering-dit261",
      "international_website": "/en/study-gothenburg/parallel-functional-programming-dit261",
      "course_name": "Parallel Functional Programming",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "24 Mar 2025",
      "duration_end": "8 Jun 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86062",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT261",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The course introduces the principles and practice of parallel programming in a functional programming language.\nIn this course, the term parallel programming means using multiple hardware cores or processors in order to gain speed. Functional programming is one of the most promising approaches to the problem of how to program in parallel, as the computers around us inevitably become more and more parallel.\nThe course covers approaches to parallel functional programming in both Haskell and Erlang. It covers current research on these topics, and relies heavily on scientific papers as its source materials. However, we stress that the emphasis in the course is practical, rather than theoretical. Several of the lectures are given by leading external experts from both academia and industry.",
      "prerequisites_and_selection": {
        "entry_requirements": "Successfully completed two years within the subject Computer Science or equivalent. The course participants must have completed an introductory course in Funtional Programming, preferably using Haskell or Erlang (examples at GU are DIT440 Introduction to Functional Programming and DIT142 Functional Programming). Applicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "30 October 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "explain the notion of software evolution; summarize state of the art in methods and tools for software evolution tasks, such as program comprehension and software refactoring; discuss the challenges associated with software evolution; explain current research trends in program comprehension, and refactoring",
        "competence_and_skills": "extract a software product's architecture from a given code base and evaluate the quality of the software product; implement one software evolution scenario; implement changes to a software product that lead to an improvement of the product's quality, make use of synergies between different improvements goals for the same product",
        "judgement_and_approach": "detect and judge needs for quality improvement or evolution in an authentic software product; plan the use of appropriate methods and techniques for performing a software evolution scenario and a quality improvement task; judge needs for improvement of methods and tools to support software evolution; plan and evaluate ideas for new or improved tools"
      }
    ],
    "course_code": "DIT265",
    "course_name": "Software Evolution Project",
    "credits": "15",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for this course, the student needs to have successfully completed a bachelor degree in Software Engineering, Computer Science, Information Technology, Information Systems, or equivalent. Additionally, the student needs to have completed Advanced Requirements Engineering (7.5 credits) and Quality Assurance and Testing (7.5 credits). Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The course consists of two modules, including a group project and individual assignments.",
    "assessment": "The course consists of a group project carried out in groups of students and one or more individual assignments. Individual optional assignments can be used to collect bonus points during the course.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/mjukvaruevolutionsprojekt-dit265",
      "international_website": "/en/study-gothenburg/software-evolution-project-dit265",
      "course_name": "Software Evolution Project",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "18 Jan 2026",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86041",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT265",
      "tuition": {
        "full_education_cost": "35 505 SEK",
        "first_payment": "35 505 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The purpose of this course is to familiarise the student with situations, activities, and techniques typical for software evolution, such as adding a new feature, refactoring, and so on. Furthermore, students learn to plan, implement, and reflect on software evolution scenarios and improvements.\nThe course consist of a series of group milestones, individual assignments, and supervision meetings during the semester. Groups and teachers agree on a software evolution scenario to be performed as a project during the course. In additon, lectures and workshops are used to provide the student with methods and knowledge about software evolution",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligable for this course, the student needs to have successfully completed the following requirements, or equivalent: A bachelor degree in Software Engineering, Computer Science, Information Technology, Information Systems, or equivalent Advanced Requirements Engineering (7.5 credits) Quality Assurance and Testing (7.5 credits) Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "explain the potential and limitations of using logic based verification methods for assessing and improving software correctness; identify what can and what cannot be expressed by certain specification/modeling formalisms; identify what can and cannot be analyzed with certain logics and proof methods",
        "competence_and_skills": "express safety and liveness properties of (concurrent) programs in a formal way; describe the basics of verifying safety and liveness properties via model checking; successfully employ tools which prove or disprove temporal properties; write formal specifications of object-oriented system units, using the concepts of method contracts and class invariants; describe how the connection between programs and formal specifications can be represented in a program logic; verify functional properties of simple programs in a verification tool",
        "judgement_and_approach": "judge and communicate the significance of correctness for software development; employ abstraction, modelling, and rigorous reasoning when approaching the development of correctly functioning software"
      }
    ],
    "course_code": "DIT272",
    "course_name": "Formal Methods in Software Development",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "The requirement for the course is to have successfully completed courses corresponding to 120 hec within the subject Computer Science or equivalent, specifically DIT203 Logic in Computer Science, 7.5 hec, and a 7.5 hec course in object-oriented programming (or equivalent) are required.",
    "course_content": "The aim of this course is to teach knowledge and skills in, and judgement about, two important styles of formal methods for reasoning about software: model checking and deductive verification. Each style will be introduced in three ways: conceptual, theoretical, and practical, using a particular tool. The course builds on skills in first-order logic and temporal logic, and shows how these formalisms can be applied, and extended, for the verification of software. On the model checking side, we cover the following topics: a specification language for concurrent processes, verifying assertions, synchronization, verifying safety and liveness properties in temporal logic. On the deductive verification side, we cover the following topics: program logics, including Hoare logic and separation logic, reasoning about loops using invariants, verification of small programs using tools for program verification techniques used when tackling verification of larger or more complex programs",
    "assessment": "The course is examined by a written hall exam and compulsory laboratory assignments handed in during the course. The practical laboratory assignments are normally carried out in pairs.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). To pass the whole course, it is necessary to pass both the written hall examination and the labs. In case of pass, the grade is determined by the result in the written hall examination.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/formella-metoder-i-mjukvaruutveckling-dit272",
      "international_website": "/en/study-gothenburg/formal-methods-in-software-development-dit272",
      "course_name": "Formal Methods in Software Development",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "2 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86029",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT272",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The aim of this course is to teach knowledge and skills in, and judgement about, two important styles of formal methods for reasoning about software: model checking and deductive verification.\nEach style will be introduced in three ways: conceptual, theoretical, and practical, using a particular tool. The course builds on skills in firstorder logic and temporal logic, and shows how these formalisms can be applied, and extended, for the verification of software.\nOn the model checking side, we cover the following topics:\n- a specification language for concurrent processes,\n- verifying assertions,\n- synchronization,\n- verifying safety and liveness properties in temporal logic.\nOn the deductive verification side, we cover the following topics:\n- a unit level specification language for Java programs,\n- a logic for verification of Java programs,\n- verification of Java programs, in the sense that the implementation of a unit fulfils the specification.",
      "prerequisites_and_selection": {
        "entry_requirements": "Successfully completed courses corresponding to 120 credits within the subject Computer Science or equivalent, specifically DIT201 Logic in Computer Science, 7.5 credits, and a 7.5 credits course in object-oriented programming (or equivalent) are required. Applicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Identify a common RE challenge in a given software development context; Choose an appropriate RE practice in a given software development context; Compare suitability as well as advantages and disadvantages of given RE practices  in a given software development context; Explain the current state of practice and research in requirements engineering",
        "competence_and_skills": "Plan suitable RE practices in a team with respect to a given software development context; Effectively apply a suitable RE practice in a team in a given software development context; Analyze the effect and quality of the outcome of a set of or individual RE practices in a given software development context",
        "judgement_and_approach": "Assess new requirements engineering knowledge (challenge, principle, practice) and relate them to the framework in this course; Suggest suitable actions to overcome a lack of requirements knowledge in a software development context; Consider inter-team, program level and social/ethical implications of a set of RE practices in a given software development context; Critically assess the effectivity of a set of RE practices from the perspective of the student's master program (e.g. Software Engineering & Technology/Management, Interaction Design, Game Design, Data Science, ...)"
      }
    ],
    "course_code": "DIT285",
    "course_name": "Advanced Requirements Engineering",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for this course the student should have a bachelor degree in Software Engineering, Computer Science, Information Technology, Information Systems, or equivalent; a successfully completed course in programming (e.g., DIT042 Object-oriented Programming, DIT012 Imperative Programming with Basic Object-orientation, DIT143 Functional Programming, or equivalent); a successfully completed project course (or bachelor thesis) in applied software development or software engineering (e.g., DIT212 Object-oriented programming project, or DIT543 Software Engineering Project). Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "Understanding requirements is key to successful software engineering: Building software that is fit for its purpose relies on understanding the exact problem that must be solved. The purpose of this course is to learn challenges, principles, and practices to identify, analyse and manage requirements from relevant sources, both at the start and during a software development project. The course regards these issues in specific development contexts, i.e. specific constellations of customers and suppliers as well as constraints related to the domain and development lifecycle that characterise developing a piece of software. This course is on advanced level and takes a holistic view on the state of the art of requirements engineering as part of successful software engineering, technology, and management. Students are expected to familiarize themselves with recent, relevant research in the field, to critically reflect on the implications of new findings, and to develop their abilities and expertise as software professionals. The course teaches challenges, principles, and concrete practices related to the following subfields of requirements engineering (RE): Requirements analysis, Elicitation, Analysis, Documentation, Negotiation, Verification and validation, Requirements management, Change management, Traceability. Beyond a brief introduction into concrete notations of requirements, the course focuses on holistically managing requirements-related knowledge on relevant scopes, including: Team level: knowledge within a software development team and across several teams working in the same area. Program level: knowledge within a particular product team or across a set of related product teams (e.g. agile release trains). Enterprise level: knowledge related to managing a portfolio of products.",
    "assessment": "The student is examined by individual active participation in all workshops, the completion of a group project and a written individual take-home exam.",
    "grading": "Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/avancerad-kravhantering-dit285",
      "international_website": "/en/study-gothenburg/advanced-requirements-engineering-dit285",
      "course_name": "Advanced Requirements Engineering",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "2 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86060",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT285",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "Understanding requirements is key to successful software engineering: Building software that is fit for its purpose relies on understanding the exact problem that must be solved.\nThe purpose of this course is to learn challenges, principles, and practices to identify, analyse and manage requirements from relevant sources, both at the start and during a software development project. The course regards these issues in specific development contexts, i.e. specific constellations of customers and suppliers as well as constraints related to the domain and development lifecycle that characterise developing a piece of software.\nThis course is on advanced level and takes a holistic view on the state of the art of\nrequirements engineering as part of successful software engineering, technology, and management. Students are expected to familiarize themselves with recent, relevant research in the field, to critically reflect on the implications of new findings, and to develop their abilities and expertise as software professionals.\nThe course teaches challenges, principles, and concrete practices related to the following subfields of requirements engineering (RE):\n- Requirements analysis\n- Elicitation\n- Analysis\n- Documentation\n- Negotiation\n- Verification and validation\n- Requirements management\n- Change management\n- Traceability\nBeyond a brief introduction into concrete notations of requirements, the course focuses on holistically managing requirements-related knowledge on relevant scopes, including:\n- Team level: knowledge within a software development team and accross several teams working in the same area.\n- Program level: knowledge within a particular product team or across a set of related product teams (e.g. agile release trains)\n- Enterprise level: knowledge related to managing a portfolio of products.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for this course the student should have:\n- a bachelor degree in Software Engineering, Computer Science, Information Technology, Information Systems, or equivalent;- a successfully completed course in programming (e.g., DIT044 Object-oriented Programming, DIT013 Imperative Programming with Basic Object-orientation, DIT143 Functional Programming, or equivalent);- a successfully completed project course (or bachelor thesis) in applied software development or software engineering (e.g., DIT212 Object-oriented programming project, or DIT543 Software Engineering Project).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "16 December 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Understand and solve problems that Distributed systems like P2P; collaborative environment systems or even parts of the core Internet technology have to solve in order to be able to function efficiently and correctly.",
        "competence_and_skills": "The student will also be able to combine theoretical studies with their respective application oriented consequences.",
        "judgement_and_approach": ""
      }
    ],
    "course_code": "DIT290",
    "course_name": "Distributed Systems, Advanced Course",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course students should have successfully completed a first year studies within the subject Computer Science or equivalent. Specifically, the course DIT240 Distributed systems is required.",
    "course_content": "In this course the students first will get to know the points of inherent difference and strength of distributed systems compared with sequential or strongly-coupled systems; consequently, the aim of the course is to teach the students to study the issues and problems that have to be addressed and solved efficiently for these differences to be taken advantage of, so that the system retains its strength and high potential. In particular, we will address and study the following issues in distributed systems: Synchronization: Continuation (after the course DIT240 Distributed systems ) of the study of distributed clock-synchronization and its uses in mutual exclusion; study about resource allocation in general. Advance one step further, to see how to get solutions without the need for clock synchronisation (and hence of lower cost in practice). Replication: The advantages and costs of replicating data: the potential improvement in response times and reliability, and the extra communication costs involved in keeping data consistent. Concurrency control: Study of different types of locking, deadlock detection. Additionally, study of concurrency control methods without locking. Recovery and Fault Tolerance: Check-pointing, optimistic and pessimistic recovery control. Fault-tolerant Agreement in Distributed Systems: (a very special and significant problem, since it is a key issue in most synchronization and coordination problems in distributed systems) Study of the basic impossibility results and discuss their implications; proceed with solutions and protocols for systems with certain strengths and design structures. Distributed Shared Memory: The difference between shared-memory-based programming and message-passing-based programming; types of consistency; write-update and write-invalidate protocols.",
    "assessment": "There will be a final written examination, as well as a couple of assignments during the term, in combination with 2 practical projects. A student who has failed a test twice has the right to change examiner, unless weighty argument can be adduced. The application shall be sent to the department and has to be in writing.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/distributed-systems-advanced-course-dit290",
      "international_website": "/en/study-gothenburg/distributed-systems-advanced-course-dit290",
      "course_name": "Distributed Systems, Advanced Course",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "20 Jan 2025",
      "duration_end": "23 Mar 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86037",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT290",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "In this course the students first will get to know the points of inherent difference and strength of distributed systems compared with sequential or strongly-coupled systems; consequently.\nThe aim of the course is to teach the students to study the issues and problems that have to be addressed and solved efficiently for these differences to be taken advantage of, so that the system retains its strength and high potential.\nMore specifically the goal is to teach the students able to understand and solve all the problems that distributed systems like P2P, collaborative environment systems or even parts of the core internet techno have to solve in order to be able to function efficiently and correctly. The goal is to combine theoretical studies with their respective application oriented consequences.",
      "prerequisites_and_selection": {
        "entry_requirements": "Successfully completed a first year studies within the subject Computer Science or equivalent. Specifically, the course DIT240 Distributed systems is required. Applicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "30 October 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "define lexical and syntactic structure of a programming language using regular expressions and grammars, respectively; define type systems for typical programming languages; recognize the characteristics of both stack machines and register machines and how common high level constructs in imperative languages are mapped to machine code; recognize the general idea of data flow analysis for static analysis of properties of programs; recognize the main issues of compiling functional and object-oriented languages",
        "competence_and_skills": "use standard tools to generate a lexical analyzer and a parser for a compiler; define suitable abstract syntax data types; implement type checking, including simple type inference, with error reporting and decoration of syntax trees with type information; design and implement compilation schemes that generate intermediate or assembly code from a source program; implement simple data flow analysis; implement simple memory management for heap-based data",
        "judgement_and_approach": "judge the difficulty of implementing various programming language features for different architectures"
      }
    ],
    "course_code": "DIT301",
    "course_name": "Compiler Construction",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible to the course, the student should have successfully completed 120 credits of studies in Computer Science or equivalent. Specifically, the following course: DIT231 Programming Language Technology or equivalent.",
    "course_content": "The aim of the course is to develop an understanding of the whole process of compiler construction, starting from lexical analysis and finishing with machine code generation. As the course laboration, the students build a complete compiler for a simple imperative language. Theory and implementation of compilers, with an emphasis on the backend phases of code generation runtime environments.",
    "assessment": "Forms of examination: programming project and oral presentation. The oral presentation is pass or fail. Students who fail the oral presentation fail the course. Students who pass the oral presentation receive a grade that is directly determined by the extent of their submissions for their programming project. The programming project is done in groups, but the oral presentations are individual.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). Students who pass the oral presentation receive a grade that is directly determined by the extent of their submissions for their programming project.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/compiler-construction-dit301",
      "international_website": "/en/study-gothenburg/compiler-construction-dit301",
      "course_name": "Compiler Construction",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "24 Mar 2025",
      "duration_end": "8 Jun 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86058",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT301",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The aim of the course is to develop an understanding of the whole process of compiler construction, starting from lexical analysis and finishing with machine code generation. As the course laboration, the students build a complete compiler for a simple imperative language.\nTheory and implementation of compilers, with an emphasis on the backend phases of code generation runtime environments.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible to the course, the student should have successfully completed 120 credits of studies in Computer Science or equivalent. Specifically, the following course: DIT231 Programming Language Technology or equivalent.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 September 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "define the notion of computable function; explain the Church-Turing thesis; explain the relationship between inductively defined sets, primitive recursion, and proofs by structural induction",
        "competence_and_skills": "prove that sets are countable or uncountable, for instance by using diagonalisation; encode inductively defined sets in such a way that members of these sets can be used as inputs or outputs for programs in one or more models of computation; implement programs—in particular, interpreters—correctly in one or more models of computation; prove that functions are or are not computable in some models of computation",
        "judgement_and_approach": "analyse programs belonging to some models of computation; and manipulate and analyse models of computation"
      }
    ],
    "course_code": "DIT313",
    "course_name": "Computability",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible to the course, the student should have successfully completed 120 credits of studies in Computer Science or equivalent. Specifically, the following courses are required, or equivalent: - 7.5 credits in discrete mathematics (e.g., DIT980 Discrete Mathematics for Computer Scientists) - 7.5 credits in functional programming (e.g., DIT143 Functional Programming or DIT440 Introduction to Functional Programming) Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "This course is about the concept of 'computation': how it can be modelled, and what its limits are. To avoid unnecessary complexity one often chooses to study computation via simplified, but powerful, models. These models can for instance be simple programming languages (like the -calculus), or idealised computers (like Turing machines). In the course several such models will be studied, both 'imperative' and 'functional'. One or more models will be used to explore the limits of computation: problems that cannot be solved (within the confines of a given model), and programs that can run arbitrary programs (modelled in a certain way). The course also includes a discussion of the Church-Turing thesis, a hypothesis which states, roughly, that a function is computable in a certain intuitive sense only if it can be defined within one of several models of computation.",
    "assessment": "The course is examined by an individual written examination carried out in an examination hall, and by individual written assignments.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). In this course one of the grades 5, 4, 3 and U is awarded. In order to get one of the grades 5, 4 or 3 one has to get the grade G on the sub-course Assignments, and a passing grade (5, 4 or 3) on the sub-course Written hall examination. In that case the grade on the course is the grade on the sub-course Written hall examination. In other cases the grade on the course is U (fail).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/berakningsbarhet-dit313",
      "international_website": "/en/study-gothenburg/computability-dit313",
      "course_name": "Computability",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "4 Nov 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18666",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT313",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course is about the concept of \"computation\": how it can be modelled, and what its limits are. To avoid unnecessary complexity one often chooses to study computation via simplified, but powerful, models. These models can for instance be simple programming languages (like the -calculus), or idealised computers (like Turing machines). In thecourse several such models will be studied, both \"imperative\" and \"functional\". One or more models will be used to explore the limits of computation: problems that cannot be solved (within the confines of a given model), and programs that can run arbitrary programs (modelled in a certain way).The course also includes a discussion of the Church-Turing thesis, a hypothesis which states, roughly, that a function is computable in a certain intuitive sense only if it can be defined within one of several models of computation.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible to the course, the student should have successfully completed 120 credits of studies in Computer Science or equivalent.\nSpecifically, the following courses are required, or equivalent:\n7\\.5 credits in discrete mathematics (e.g., DIT980 Discrete Mathematics for Computer Scientists)7\\.5 credits in functional programming (e.g., DIT143 Functional Programming or DIT440 Introduction to Functional Programming)\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "12 August 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Recognize well-established cryptosystems and identify settings where they can be used to improve the security of a given system; Demonstrate knowledge of principles behind provable security; Understand the theoretic foundations of cryptography",
        "competence_and_skills": "Describe goals and design principles for, and common structures of, several cryptographic primitives and proof systems; Identify, analyse and explain various forms of attacks based on improper usage of primitives, modes of operation, or protocols; Reproduce rigorous proofs of security",
        "judgement_and_approach": " Exemplify when various notions of security are applicable and describe the security guarantees provided; Apply the acquired knowledge in new situations"
      }
    ],
    "course_code": "DIT352",
    "course_name": "Cryptography",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course the student should have successfully completed courses corresponding to 90 credits in the subject of Computer Science or Mathematics, including:\n\n•7.5 credits in algebra or discrete mathematics (covering topics: modular arithmetic, and elementary probability theory)\n•7.5 credits in programming\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "•Basic and advanced goals of cryptography (confidentiality, authentication, anonymity, zero-knowledge)\n•Symmetric key cryptography: block ciphers, design principles and examples, modes of operation, message authentication codes.\n•Public key cryptography: key exchange, asymmetric ciphers, signatures. Attack models and security notions.\n•Cryptographic Protocols: secret sharing, zero-knowledge proofs.",
    "assessment": "The course is examined by home assignments done individually or in groups, and a written exam done individually in an examination hall.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). In order to pass the course both the assignments and the written hall examination have to be approved. The grade for the entire course will be determined by the written hall exam.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/kryptografi-dit352",
      "international_website": "/en/study-gothenburg/cryptography-dit352",
      "course_name": "Cryptography",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "4 Nov 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18679",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT352",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "Basic and advanced goals of cryptography (confidentiality, authentication, anonymity, zero-knowledge)\nSymmetric key cryptography: block ciphers, design principles and examples, modes of operation, message authentication codes.\nPublic key cryptography: key exchange, asymmetric ciphers, signatures. Attack models and security notions.\nCryptographic Protocols: secret sharing, zero-knowledge proofs.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course the student should have successfully completed courses corresponding to 90 credits in the subject of Computer Science or Mathematics, including: 7.5 credits in algebra or discrete mathematics (covering topics: modular arithmetic, and elementary probability theory) 7.5 credits in programming Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "19 June 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "describe current approaches to parallel computing; explain the design principles of the hardware support for the shared memory and message passing programming models; describe the implementation of different models of thread-level parallelism, such as core multithreading, chip multiprocessors, many-cores or GPGPU",
        "competence_and_skills": "implement synchronization methods for shared memory and message passing parallel computers; design scalable parallel software and analyze its performance",
        "judgement_and_approach": "analyze the trade-offs of different approaches to parallel computing in terms of function, performance and cost"
      }
    ],
    "course_code": "DIT362",
    "course_name": "Parallel Computer Architecture",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "The course DIT051 Computer Architecture, 7.5 credits, or equivalent, is required.",
    "course_content": "Power and temperature have joined performance as first-class design goals. High-performance computing platforms now strive for the highest performance/watt. This course looks at the design of current multicore systems with an eye towards how those designs are likely to evolve over the next decade. A common thread running through all content parts is a discussion of cost tradeoffs with respect to performance, power, energy, verifiability, programmability, and maintainability. A second unifying theme is the memory bottleneck, and the importance of efficient resource management. The lectures are complemented with several exercise sessions. Via three lab assignments, participants explore the internal architecture of modern CPUs and research the implications of memory hierarchy and cache coherence. The course also contains a written assignment in which the participants take the role of the computer architect who will survey and discuss solutions to a particular problem in the field of parallel computing.",
    "assessment": "The course is evaluated via a written hall examination, a pair project based on peer assessment and three lab sessions conducted in teams of two students.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). A Pass grade (G) for the entire course requires at least a Pass grade for all sub-courses. To be awarded Pass with Distinction (VG) for a full course, the To pass the course, all mandatory components must be passed. To earn a higher grade than Pass, a higher weighted average from the grades of the components is required.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/parallell-datorarkitektur-dit362",
      "international_website": "/en/study-gothenburg/parallel-computer-architecture-dit362",
      "course_name": "Parallel Computer Architecture",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "20 Jan 2025",
      "duration_end": "23 Mar 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86029",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT362",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "Power and temperature have joined performance as first-class design goals. High- performance computing platforms now strive for the highest performance/watt. This course looks at the design of current multicore systems with an eye towards how those designs are likely to evolve over the next decade.\nA common thread running through all content parts is a discussion of cost tradeoffs with respect to performance, power, energy, verifiability, programmability, and maintainability. A second unifying theme is the memory bottleneck, and the importance of efficient resource management.",
      "prerequisites_and_selection": {
        "entry_requirements": "The course DIT051 Computer Architecture, 7.5 credits, or equivalent, is required.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "23 September 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "explain a representative set of available methods for machine learning",
        "competence_and_skills": "implement and analyze machine learning algorithms; apply sound mathematical principles to the inference of hypotheses from empirical data and models on scientific grounds",
        "judgement_and_approach": "choose appropriate methods and apply them to specific inference problems, based on a solid understanding of scientific literature in the field;  evaluate the methods qualitatively and quantitatively, and recognize their strengths as well as their limitations"
      }
    ],
    "course_code": "DIT382",
    "course_name": "Algorithms for Machine Learning and Inference",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible to the course, the student should have a bachelor degree. In particular, the student must have acquired the following knowledge: 7.5 credits of programming, 7.5 credits of data structures, 7.5 credits of basic probability and statistics, 7.5 credits of linear algebra, 7.5 credits of multivariate calculus. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "This course will discuss the theory and application of algorithms for machine learning and inference, from an AI perspective. In this context, we consider as learning to draw conclusions from given data or experience which results in some model that generalises these data. Inference is to compute the desired answers or actions based on the model. Algorithms of this kind are commonly used in for example classification tasks (e.g., character recognition, or to predict if a new customer is creditworthy) and in expert systems (e.g., for medical diagnosis). A new and commercially important area of application is data mining, where the algorithms are used to automatically detect interesting information and relations in large commercial or scientific databases. The course intends to give a good understanding of this crossdisciplinary area, with a sufficient depth to use and evaluate the available methods, and to understand the scientific literature. During the course we may discuss potential problems with machine learning methods, for example, bias in training data and safety of autonomous agents.",
    "assessment": "The course is examined by assignments and a written hall examination.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/algoritmer-for-maskininlarning-och-slutledning-dit382",
      "international_website": "/en/study-gothenburg/algorithms-for-machine-learning-and-inference-dit382",
      "course_name": "Algorithms for Machine Learning and Inference",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "20 Jan 2025",
      "duration_end": "23 Mar 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86011",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT382",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course will discuss the theory and application of algorithms for machine learning and inference, from an AI perspective. In this context, we consider as learning to draw conclusions from given data or experience which results in some model that generalises these data. Inference is to compute the desired answers or actions based on the model.\nAlgorithms of this kind are commonly used in for example classification tasks (e.g., character recognition, or to predict if a new customer is creditworthy) and in expert systems (e.g., for medical diagnosis). A new and commercially important area of application is data mining, where the algorithms are used to automatically detect interesting information and relations in large commercial or scientific databases.\nThe course intends to give a good understanding of this crossdisciplinary area, with a sufficient depth to use and evaluate the available methods, and to understand the scientific literature. During the course we may discuss potential problems with machine learning methods, for example, bias in training data and safety of autonomous agents.\nThe following concepts are covered:\nBayesian learning: likelihood, prior, posterior.\nSupervised learning: Bayes classifier, Logistic Regression, Deep Learning (Standard and CNN), Support Vector Machines, regression models, K-nn models.\nUnsupervised learning: Clustering algorithms, EM algorithm, Mixture models,\nKernel methods,\nTemporal machine learning models (for example RNN)",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible to the course, the student should have a bachelor degree.\nIn particular, the student must have acquired the following knowledge:\n- 7\\.5 credits of programming (e.g., DIT440 Introduction to Functional Programming, DIT042 Object-Oriented Programming, DIT012 Imperative Programming with Basic Object-Orientation, or equivalent)- 7\\.5 credits of data structures (e.g., DIT961 Data Structures, DIT181 Data Structures and Algorithms, or equivalent)- 7\\.5 credits of basic probability and statistics (e.g., MSG810 Mathematical Statistics and Discrete Mathematics, DIT861 Statistical Methods for Data Science, or equivalent) - 7.5 credits of linear algebra (e.g., MMGD20 Linear Algebra, or equivalent)- 7\\.5 credits of multivariate calculus.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 September 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "explain how internal components of modern operating systems work; explain key concepts and algorithms in operating system implementations; state how research domains (ranging from parallelism to security) meet in the context of modern operating systems",
        "competence_and_skills": "demonstrate the core functionality of modern operating systems; write programs that interface with the operating system at the system-call level; implement a piece of system-level code; demonstrate programming using multithread synchronization constructs (with example environment languages such as C, C++, Java)",
        "judgement_and_approach": "analyze and critically weight the trade-offs in the design and implementation of operating systems' internal components"
      }
    ],
    "course_code": "DIT401",
    "course_name": "Operating Systems",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course students should have successfully completed courses corresponding to 60 higher education credits of studies within the subject Computer Science, or equivalent, including the following courses: a 7.5 credits course in machine oriented programming (e.g., DIT151 or equivalent), a 7.5 credits course in data structures (e.g., DIT960 or equivalent), a 7.5 credits course in programming (e.g., DIT440, DIT012 or equivalent). Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The course focuses on the design and implementation of operating systems. Topics covered include: concurrent processes, resource management, deadlocks, memory management techniques, virtual memory, processor scheduling, disk scheduling, file systems, distributed file systems, micro kernels, multiprocessor operating system issues and virtual machines. Examples or case-studies are provided for all the subjects covered during the course.",
    "assessment": "The course is examined by Laboratory work and a final individual written exam carried out in an examination hall. The Laboratory work is normally carried out in pairs.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U). To pass the course, grade Pass (G) is needed on both the sub-courses. To be awarded a Pass with Distinction (VG) the student must get the grade Pass with Distinction (VG) on the sub-course Written exam and the grade Pass on the sub-course Laboratory work.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/operativsystem-dit401",
      "international_website": "/en/study-gothenburg/operating-systems-dit401",
      "course_name": "Operating Systems",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "2 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86038",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT401",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The course focuses on the design and implementation of operating systems.\nTopics covered include:\nconcurrent processes\nresource management\ndeadlocks\nmemory management techniques\nvirtual memory\nprocessor scheduling\ndisk scheduling\nfile systems\ndistributed file systems\nmicro kernels\nmultiprocessor operating system issues and virtual machines\nExamples or case-studies are provided for all the subjects covered during the course.",
      "prerequisites_and_selection": {
        "entry_requirements": "Successfully completed courses corresponding to 60 credits of studies within the subject Computer Science, or equivalent, including the following courses:\na 7.5credits course in machine oriented programming (e.g., DIT151 or equivalent),a 7.5credits course in data structures (e.g., DIT960 or equivalent),a 7.5credits course in programming (e.g., DIT440, DIT012 or equivalent).\nApplicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "List the different types of parallel computer architectures, programming models and paradigms, as well as different schemes for synchronization and communication; List the typical steps to parallelize a sequential algorithm; List different methods for analyses methodologies of parallel program systems",
        "competence_and_skills": "Apply performance analysis methodologies to determine the bottlenecks in the execution of a parallel program; Predict the upper limit to the performance of a parallel program",
        "judgement_and_approach": "Given a particular software, specify what performance bottlenecks are limiting the efficiency of parallel code and select appropriate strategies to overcome these bottlenecks given a certain software; Design energy-aware parallelization strategies based on a specific algorithm structure and computing system organization; Argue for which performance analysis methods that are important given a specific context"
      }
    ],
    "course_code": "DIT431",
    "course_name": "High Performance Parallel Programming",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course, students should have successfully completed courses corresponding to 105 credits within the subject of Computer Science, Mathematics, Software Engineering, or equivalent, including a 7.5 credits course in machine-oriented programming (e.g., DIT151 Machine Oriented Programming, or equivalent). Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "This course looks at parallel programming models, efficient programming methodologies and performance tools with the objective of developing highly efficient parallel programs.",
    "assessment": "The course is examined by an individual written exam that is carried out in an exam hall and a laboratory report written in groups of two.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/parallell-programmering-for-hog-prestanda-dit431",
      "international_website": "/en/study-gothenburg/high-performance-parallel-programming-dit431",
      "course_name": "High Performance Parallel Programming",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "2 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86036",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT431",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course looks at parallel programming models, efficient programming methodologies and performance tools with the objective of developing highly efficient parallel programs.\nThe course consists of a set of lectures and laboratory sessions.\nThe lectures start with an overview of parallel computer architectures and parallel programming models and paradigms. An important part of the discussion are mechanisms for synchronization and data exchange. Next, performance analysis of parallel programs is covered.\nThe course proceeds with a discussion of tools and techniques for developing parallel programs in shared address spaces. This section covers popular programming environments such as pthreads and OpenMP.\nNext the course discusses the development of parallel programs for distributed address space. The focus in this part is on the Message Passing Interface (MPI). Finally, we discuss programming approaches for executing applications on accelerators such as GPUs. This part introduces the CUDA (Compute Unified Device Architecture) programming environment.\nThe lectures are complemented with a set of laboratory sessions in which participants explore the topics introduced in the lectures. During the lab sessions, participants parallelize sample programs over a variety of parallel architectures, and use performance analysis tools to detect and remove bottlenecks in the parallel implementations of the programs.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course, students should have successfully completed courses corresponding to 105 credits within the subject of Computer Science, Mathematics, Software Engineering, or equivalent.Including a 7.5 credits course in machine-oriented programming (e.g., DIT151 Machine Oriented Programming, or equivalent).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Examine current technological and social trends in gaming; Analyse the potential opportunities and threats associated with contemporary gaming trends",
        "competence_and_skills": "Apply creativity techniques with the intention of exploring innovative new gameplay concepts; Implement game designs to explore novel, emerging techniques",
        "judgement_and_approach": "Assess the ethical and societal impact of contemporary trends in gaming"
      }
    ],
    "course_code": "DIT468",
    "course_name": "Current Trends in Gaming",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for this course, students must have successfully completed 7.5 credits of object-oriented programming.",
    "course_content": "This course focuses on exploring the implications associated with a selection of current trends in gaming. It blends together methods for ideation with implementation. It addresses the socioeconomic implications associated with new technology; business models; And with changing audience expectations.",
    "assessment": "The course is assessed via a portfolio of individual and group submissions. The overall grade for the course is based on a weighted average of portfolio elements.",
    "grading": "Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/aktuella-trender-inom-spel-dit468",
      "international_website": "/en/study-gothenburg/current-trends-in-gaming-dit468",
      "course_name": "Current Trends in Gaming",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "4 Nov 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18669",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT468",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course focuses on exploring the implications associated with a selection of current trends in gaming. It blends together methods for ideation with implementation. It addresses the socioeconomic implications associated with new technology; business models; And with changing audience expectations.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for this course, students must have successfully completed 7.5 credits of object-oriented programming.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "12 August 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "decide on how and when to use different graphical interface elements; decide on how to use keypaths and scenarios to create an interaction sequence; utilize commonly used interaction design solutions for graphical interfaces; re-design an existing user interface, and decide on which part of the existing design solution needs to be changed and in what way",
        "competence_and_skills": "Design a graphical user interface adapted to a specific use and user in terms of: layout, interaction sequence, correct use of controls and look and feel; Design a graphical user interface which is manipulated via mouse and keyboard; Design a graphical user interface for a touch-based interaction; Verbally and in short written form present their design and motivate design decisions; valuate usability and user experience in a graphical user interface",
        "judgement_and_approach": "Solve interaction design problems related to graphical interfaces and motivate your solutions; Design a relatively complex graphical interface, and be able to provide a valid design rationale for it; Being able to select and apply previously existing design solutions to new graphical interfaces; Being able to, from a scenario, extract a users needs"
      }
    ],
    "course_code": "DIT493",
    "course_name": "Graphical Interfaces",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course the student must have a Bachelor degree of 180 credits. Additionally, the course DAT420 Human - computer interaction, 7.5 credits, or the equivalent is required.",
    "course_content": "[     \"Commonly used interaction design solutions in graphical interfaces\",     \"Designing for users on different levels (e.g. beginners vs. experts)\",     \"Designing interaction sequences\",     \"Layout of graphical user interfaces;\",     \"Designing look and feel; using color, text and graphics\",     \"Correct use of graphical user interface elements such as controls, toolbars, menus, dialogues etc.\",     \"The difference between regular user interfaces and touch-based interfaces.\"   ]",
    "assessment": "The course is examined through three modules, namely: Group-based lab exercise (Fail, Pass), Home exam, (Fail, Pass), Individual design project (Fail, Pass) To pass the course, one has to pass all parts of it.",
    "grading": "The grading scale comprises: Pass (G) and Fail (U). To pass the course, all mandatory components must be passed.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/grafiska-granssnitt-dit493",
      "international_website": "/en/study-gothenburg/graphical-interfaces-dit493",
      "course_name": "Graphical Interfaces",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "4 Nov 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18670",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT493",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "Content includes, but is not limited to:\nCommonly used interaction design solutions in graphical interfaces\nDesigning for users on different levels (e.g. beginners vs. experts)\nDesigning interaction sequences\nLayout of graphical user interfaces;\nDesigning look and feel; using color, text and graphics\nCorrect use of graphical user interface elements such as controls, toolbars, menus, dialogues etc.\nThe difference between regular user interfaces and touch-based interfaces.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course the student must have a Bachelor degree of 180 credits. Additionally, the course DAT420 Human - computer interaction, 7.5 credits, or the equivalent is required.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "19 June 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Describe the typical structure of game engines and the design decisions associated with specific parts of such engines",
        "competence_and_skills": "Develop extensions to an example game engine to augment and optimise functionality; Identify faults and deficiencies in an example game engine, and outline solutions for those faults",
        "judgement_and_approach": "Compare and contrast existing game engines to determine functionality and extendibility; Plan several parallel extensions of an example game engine to meet game related goals"
      }
    ],
    "course_code": "DIT572",
    "course_name": "Game Engine Architecture",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for this course, students must have either:\n\n•successfully completed the course Computer Graphics, 7.5 credits, or equivalent, or\n•have 15 credits of programming experience, of which 7.5 of those credits should be\nin an object-oriented context.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level\nof an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The design and implementation of the fundamental components of a game engine is the\ncore of the Game Engine Architecture course. The course focuses mainly upon 2-\ndimensional engines although other types of game engines are discussed, and students\nwishing to explore 3D game engines can do so as part of the assignment.\n\nDuring the course we will go over the development and construction of our own game\nengine. This engine (called Shard) is specific to this course, and is thus fully open to\nexpansions and modifications. During the course students will take the source code of\nShard and improve upon it to address perceived inadequacies and develop new\nfunctionality. They will also build an example game that makes use of their modified\nengine to deliver a representative game experience.\n\nThe course will cover timing regulation, game object architecture, collision action,\ncollision responses, and some simple physics. It will also discuss relevant design\ndecisions and design patterns. It is not expected during this course that you will develop\na feasible competitor for what is on the market. Rather, the process of exploring and\nexpanding a bespoke game engine is intended to be illuminating for those developing\ngames in more robust engines.",
    "assessment": "The course is graded by two technical artefacts (a modified game engine and an example\ngame) along with an oral presentation. The overall grade for the course comes from a\nweighted average of these elements.",
    "grading": "Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/spelmotorarkitektur-dit572",
      "international_website": "/en/study-gothenburg/game-engine-architecture-dit572",
      "course_name": "Game Engine Architecture",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "20 Jan 2025",
      "duration_end": "23 Mar 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86045",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT572",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The design and implementation of the fundamental components of a game engine is the core of the Game Engine Architecture course. The course focuses mainly upon 2-dimensional games although  other types of game engines are discussed, and students wishing to explore 3D game engines can do so as part of the assignment. During the course we will develop an example game engine which  includes several of the key aspects of professional game engine systems.\nThe course will cover timing regulation, game object architecture, collision action, collision responses, and some simple  physics. It will also discuss relevant design decisions and design patterns. It is not expected during this course that you will develop a feasible competitor for what is on the market. Rather, the process of  building a game engine is intended to be illuminating when developing games in more robust engines.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for this course, students must have either:\n- successfully completed the course Computer Graphics, 7.5 credits, or equivalent, or- have 15 credits of programming experience, of which 7.5 of those credits should be in an object-oriented context.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "23 September 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "List cyber-physical systems, and in particular information and communication technologies (ICT) methods for supporting adaptiveness and cybersecurity based on the student's chosen area, for example, design of protocols or algorithms, security issues, data management and evaluation methodology; Discuss current research and development in the area of such cyber-physical systems, in order to meet the requirements of sustainable development in terms of security, economy and ecology",
        "competence_and_skills": "Design and analyse methods, algorithms, protocols for adaptive and cybersecure cyber-physical systems, such as smart power grid networks; Work with advanced algorithms such as parallel or distributed algorithms for efficient data processing and adaptations or algorithmic implementations of them so that they can meet needs of the system in focus; Plan and organize a small team project and document the work and the result in a report",
        "judgement_and_approach": "Present complex material to a small audience; Work in a small-team project, on planning, scheduling and conducting the work; Judge the relevance of the literature in a topic"
      }
    ],
    "course_code": "DIT616",
    "course_name": "Data-driven support for cyber-physical systems",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "Bachelor's degree in Computer Science, or equivalent is required. The student should have successfully completed specific courses in computer engineering, algorithms, data structures, and programming. Additionally, the student should have completed courses in one of the four areas: Computer Communication, Operating Systems, Computer Security, or Distributed Systems. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The course gives an introduction to new cyber-physical systems, focusing on methods in computer science and other domains to support distributed operations, cyber security, and data processing. Topics include distributed computing, systems security, networking, and computer communication in the context of cyber-physical systems.",
    "assessment": "The course is examined through a written report on the project conducted by the students, and oral presentation, including demonstration. The written report is normally carried out in small groups of students. The students also need to complete individual reports reflecting on the project and group dynamics.",
    "grading": "Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/data-drivet-stod-for-cyberfysiska-system-dit616",
      "international_website": "/en/study-gothenburg/data-driven-support-for-cyber-physical-systems-dit616",
      "course_name": "Data-driven support for cyber-physical systems",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "2 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86039",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT616",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The course gives an introduction to new cyber-physical systems, such as the smart grid, where data has become very important for adaptive operations and with an increased dependence on information and communication technologies (ICT). Topics in the course are focused on new methods in the intersection of computer science and other domains, to support distributed operations, cyber security, and processing of data that are generated due to digitalization of these systems (considering that the data can be massive).\nThe content is focused on distributed computing and systems, data processing, information and systems security, networking and computer communication in the context of new cyber-physical systems. There are lectures from the faculty to give an overview of the areas of the course, and invited presentations from industry to talk about actual systems, as well as in-depth presentations by the student themselves on specific research topics relating to their projects.\nTypically, the lectures include an introduction to the new types of cyber-physical systems, e.g., the smart grid. Open research problems in relation to distributed operations, data-processing and cyber security are discussed, e.g., through lectures on streaming, security and privacy, and communication suitable in this domain. Examples of cyber-physical systems important for society are presented, e.g., the smart grid from both on the transmission and distribution perspective. The course starts with an introduction to power systems, to give students enough knowledge of terminology to understand papers connected to the smart grid.",
      "prerequisites_and_selection": {
        "entry_requirements": "Bachelor's degree in Computer Science, or equivalent is required. The student should have successfully completed the following courses (or equivalent):\nDIT791 Introduction to ComputerEngineering, 7.5 hecDIT602 Algorithms, 7.5 hecDIT960 Data Structures, 7.5 hecand at least 7.5 hec in programming.\nFurthermore, the student should have completed 7.5 hec or equivalent in one of the four areas:\nComputer Communication (such as DIT423 or equivalent), orOperating Systems (such as DIT401 or equivalent), orComputer Security (such as DIT641 or equivalent), orDistributed Systems (such as DIT240 or equivalent).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "explain the fundamental goals of computer security; describe several security vulnerabilities and possible protection mechanisms; describe common methods for security assessment and evaluation as well as problems with current security metrication",
        "competence_and_skills": "analyze the security of different types of systems and suggest improvements; use a few methods for security modeling; demonstrate his or her skill in technical writing",
        "judgement_and_approach": "assess the advantages and disadvantages between different protection mechanisms; judge the consequences of insecurity Keep an informed argument of the ethical and social aspects of computer security"
      }
    ],
    "course_code": "DIT642",
    "course_name": "Computer Security",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course students should have successfully completed courses corresponding to 60 hec within the subject Computer Science or equivalent. A 7.5 hec course in Programming is required.",
    "course_content": "The course gives basic knowledge in the security area, i.e. how to protect your system against intrusions and attacks. The purpose of intrusions can be to change or delete resources (data, programs, hardware, etc), to get unauthorized access to confidential information or unauthorized use of the system's services. The course covers threats and vulnerabilities in the computer systems and networks, as well as rules, methods and mechanisms for protection. Modeling and assessment of security and dependability as well as metrication methods are covered. A holistic security approach is taken and organizational, business-related, social, human, legal and ethical aspects are treated. The following topics will be covered, among others. Introduction to computer security, Overview of security threats, Introduction to cryptography, Security in operating systems, Security mechanisms including authentication, authorization, and access control, Introduction to Network Security and Intrusion detection systems, Security Models: Bell-LaPadula, Biba, Chinese wall etc., Security management, organization and ethics",
    "assessment": "The course is examined by laboratory exercises done in groups and through individual mandatory assignments, where a voluntary test is included.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/datasakerhet-dit642",
      "international_website": "/en/study-gothenburg/computer-security-dit642",
      "course_name": "Computer Security",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "20 Jan 2025",
      "duration_end": "23 Mar 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86035",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT642",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The course gives basic knowledge in the security area, i.e. how to protect your system against intrusions and attacks. The purpose of intrusions can be to change or delete resources (data, programs, hardware, etc), to get unauthorized access to confidential information or unauthorized use of the system's services. The course covers threats and vulnerabilities in the computer systems and networks, as well as rules, methods and mechanisms for protection. Modeling and assessment of security and dependability as well as metrication methods are covered. A holistic security approach is taken and organizational, business-related, social, human, legal and ethical aspects are treated. The following topics will be covered, among others.\nIntroduction to computer security\nOverview of security threats\nIntroduction to cryptography.\nSecurity in operating systems\nSecurity mechanisms including authentication, authorization, and access control\nIntroduction to Network Security and Intrusion detection systems\nSecurity Models: Bell-LaPadula, Biba, Chinese wall etc.\nSecurity management, organization and ethics",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course students should have successfully completed courses corresponding to 60 hec within the subject Computer Science or equivalent. A 7.5 hec course in Programming is required.\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 September 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Explain what \"Concept-Driven Interaction Design\" means, and give an account of some of the alternative theories, programmes, and approaches within the area of interaction design; Describe concept-driven design methods as well as their underlying theories; Analyze and discuss a certain design in conceptual terms",
        "competence_and_skills": "Analyze experiences grounded in the conceptual framing of interactive systems or artefacts; Choose and apply suitable design methods, informed by theory and context; Design towards a certain concept, making it permeate all aspects of the artefact;  Be able to motivate ones design decisions in relation to the concept one is designing for;  Give and receive constructive feedback regarding concept driven design",
        "judgement_and_approach": "Be able to apply and identify approaches and theories in order to discuss, motivate, and design concept-driven artefacts; Be able to conclude and discuss the ethical and societal consequences of designing towards a certain concept"
      }
    ],
    "course_code": "DIT666",
    "course_name": "Concept-Driven Interaction Design",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "Bachelor degree 180 hec and the courses DIT095 Human computer interaction, 7.5 hec and DIT104 Interaction design methodology, 7.5 hec or equivalent.",
    "course_content": "After the course you should have a clear idea of some conceptual and aesthetic ideals and how to design according to them, giving a valid design rationale. Designing interactive systems is often, but not always about designing for efficiency in a user-centered manner. In this course, we explore theories and alternative approaches to interaction design as a complement to user-centered design. We acknowledge the need to design for efficiency, but aim instead for playfulness, criticism, embodiment or various emotions (e.g. fear, joy, comfort), all of which are supported by the conceptual framing of the design. In this course we will look closer at different fringe theories within interaction design, and discuss and practice how to design with them through the analysis and development of design concepts.",
    "assessment": "The course is examined through three modules:\n\n1.Literature seminars, where literature is presented along with an issue and is discussed (2 hec).\n2.Exercises where various design methods that focus on the development of a concept in a design process is practiced.The exercises also give training in giving and taking constructive criticism (2 hec).\n3.One individual project (3,5 hec).",
    "grading": "Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/koncept-driven-interaktionsdesign-dit666",
      "international_website": "/en/study-gothenburg/concept-driven-interaction-design-dit666",
      "course_name": "Concept-Driven Interaction Design",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "24 Mar 2025",
      "duration_end": "8 Jun 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86101",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT666",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "",
      "prerequisites_and_selection": {
        "entry_requirements": "Bachelor degree 180 hec and the courses DIT095 Human computer interaction, 7.5 hec and DIT104 Interaction design methodology, 7.5 hec or equivalent. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "17 September 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "demonstrate a broad knowledge of Internet technology and domain name systems; demonstrate a considerable degree of technical knowhow on the Internet new generation IPv6; describe and analyse architecture, core protocols, global routing, services as well as their limitations of networks such as the Internet; discuss and analyse contemporary networking problems, such as TCP connections, contention, performance and flow control.",
        "competence_and_skills": "define systematically and analyse a computer network in terms of communication graphs and as a distributed system. This specifically refers to problems such as token circulation, spanning tree construction, leader election, initialization of data link algorithms, topology update, clock synchronization, and more; use a number of proof techniques, such as re-computation of floating output, fair composition, variant functions, and convergence stairs, as well as demonstrate the correctness of a number of fault-containment or super-stabilization algorithms; develop small scale network applications using fundamental networking techniques; design and develop your own network-oriented program and then test and demonstrate it in the lab; demonstrate and write lab reports on protocol correctness; explain and demonstrate the correctness of the studied (self-stabilizing) protocols as well as clearly describe the network algorithms that you design yourself; demonstrate software developments for advanced fault-tolerant client-server and peer-to-peer architectures; design distributed (self-stabilizing) algorithms for computer networks and show why they work",
        "judgement_and_approach": "describe, design and analyse existing and new algorithms for network protocols with a very strong emphasis on self-stabilizing algorithms for computer networks; critically analyse the effect of failures, such as transient faults, message omission, and topology changes, on the system and how can such failures propagate and effect computer networks"
      }
    ],
    "course_code": "DIT671",
    "course_name": "Computer Networks",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "The requirement for the course is to have a Bachelor's degree within the subject Computer Science or equivalent. The student should also have successfully completed specific courses in discrete mathematics, finite automata theory, imperative or object-oriented programming, data structures, algorithms, computer communication or operating systems, and prove knowledge of English.",
    "course_content": "This course focuses on the algorithmic design of network protocols and covers a range of sub-specialties including computer communication network concepts, programming using BSD socket API, and distributed fault-tolerance algorithms with a very strong emphasis on self-stabilization. The aim is to design and analyze algorithms for network protocols and gain knowledge in existing communication networks, including supporting systems and protocols, fundamental tasks, and methods in data communication networks.",
    "assessment": "The course is examined by an individual written examination carried out in an examination hall at the end of the course, and written assignments which are normally carried out in pairs.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). In order to pass the course, students must receive a passing grade in both modules. The grade for the entire course will be determined by the written exam. Grading scale: Pass (G) and Fail (U)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/datornatverk-dit671",
      "international_website": "/en/study-gothenburg/computer-networks-dit671",
      "course_name": "Computer Networks",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "2 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86037",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT671",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course focuses on the algorithmic design of network protocols and covers a range of sub-specialties including: computer communication network concepts, programming using BSD socket API, and distributed fault-tolerance algorithms with a very strong emphasis on self-stabilization. The aim of this course is to learn to design and analyze algorithms for network protocols and to gain knowledge in existing communication networks, including supporting systems and protocols, fundamental tasks and methods in data communication networks. Mastery of computer networks involves both theory and practice in the design, implementation and use of network protocols and services.\nThis course offers learning experiences that involve hands-on experimentation and analysis as they reinforce student understanding of concepts and their application to real-world problems. Several laboratory experiments are given and involve API programming for fault-tolerance network systems, and Internet interconnections and services from a practical perspective, and design and analysis of protocols with a strong emphasis on self-stabilizing algorithms.\nThis course provides the students with the analytical background needed for understanding fundamental issues in the design of distributed fault tolerance algorithms for computer network protocols. The course has a very strong emphasis on transient faults and how self-stabilizing algorithms can allow automatic recovery after their occurrence.",
      "prerequisites_and_selection": {
        "entry_requirements": "The requirement for the course is to have a Bachelor's degree within the subject Computer Science or equivalent. The student should also have successfully completed the courses listed below, either as part of the Bachelor's degree or as single subject courses.\n7\\.5 hec in discrete mathematics (DIT980 or equivalent)7\\.5 hec in finite automata theory and formal language (DIT322 or equivalent)7\\.5 hec in imperative or object oriented programming (DIT012, DIT952, or equivalent)7\\.5 hec in data structures (DIT961 or equivalent)7\\.5 hec in algorithms (DIT602 or equivalent)7\\.5 hec in computer communication (DIT423 or equivalent) or operating systems (DIT401 or equivalent)\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 November 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Provide an overview of different applications of AI and related areas; Describe how some different well-known AI-systems work and how they are used; Explain how AI approaches relate to other kinds of advanced information processing",
        "competence_and_skills": "Identify problems that can be solved with AI and other advanced computational techniques; Design simpler AI systems for different applications, including model choices and system design; Implement AI systems with programming in combination with different tools and programming libraries",
        "judgement_and_approach": "Discuss advantages and disadvantages of different models and approaches in AI; Reflect over fundamental possibilities and limitations of current AI approaches; Critically analyze and discuss AI applications with respect to ethics, privacy and societal impact; Show a reflective attitude in all learning."
      }
    ],
    "course_code": "DIT728",
    "course_name": "Design of AI systems",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course the student must have successfully completed courses in: 7,5 hec mathematical thinking (DIT025 or DIT856 or equivalent) or a course in basic mathematics (containing e.g. calculus, linear algebra, discrete mathematics), 7,5 hec mathematical statistics (e.g. MSG810 or DIT862 or similar), 7,5 hec programming in a general-purpose language (e.g. Python/Java/C or similar), An introductory course in Data Science and/or AI, for example DIT852 or DIT405 or equivalent. We strongly recommend to also take a course in Machine learning, for example DIT866 or similar, or that such a course is taken in parallel alongside this course.",
    "course_content": "The course teaches design of AI systems in several different ways: Reading of papers and lectures describing different AI systems and their design (eg. AlphaZero, Watson, systems for self-driving cars,...) Opportunities to see and try out the implementation of different simpler AI systems. Own problem solving in the form of design and implementation of simpler AI systems. Discussions about possibilities and limitations of AI, ethics and societal impact.",
    "assessment": "Assignments and mini-projects.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U). To pass the course, the assignments and mini-projects must pass. To get a higher grade than Pass, a higher weighted average from the grades of the assignments and mini-projects is required.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/design-av-ai-system-dit728",
      "international_website": "/en/study-gothenburg/design-of-ai-systems-dit728",
      "course_name": "Design of AI systems",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "20 Jan 2025",
      "duration_end": "23 Mar 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86005",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT728",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course is for students who are interested in the empirical methods applied to the field of software engineering. The course introduces quantitative and qualitative methods in software engineering with accompanying statistical methods used for analysis.\nThe course contains:\nDescriptive and inferential statistical methods applied to software engineering.\nConducting qualitative and quantitative methods in software engineering.\nMethods for analyzing quantitative and qualitative data in software engineering.\nUsage of statistical tools.",
      "prerequisites_and_selection": {
        "entry_requirements": "The student must have successfully completed courses in:\n- 7,5 hec mathematical thinking (DIT025 or DIT856 or equivalent) or a course in basic mathematics (containing e.g. calculus, linear algebra, discrete mathematics)- 7,5 hec mathematical statistics (e.g. MSG810 or DIT862 or similar)- 7,5 hec programming in a general-purpose language (e.g. Python/Java/C or similar),- An introductory course in Data Science and/or AI, for examPle DIT852 or DIT405 or equivalent.\nWe strongly recommend to also take a course in Machine learning, for example DIT866or similar, or that such a course is taken in parallel alongside this course.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "20 September 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "describe and summarise  problems that have been addressed in the bioinformatics literature, and computational approaches to solving them",
        "competence_and_skills": "design and implement computational solutions to problems in bioinformatics",
        "judgement_and_approach": "critically discuss different bioinformatics methods that address the same task or related tasks, and to discuss differences in the tasks adddressed, or differences in the computational approache; identify situations where the same computational methods are applied in addressing different problems, even across different application areas"
      }
    ],
    "course_code": "DIT743",
    "course_name": "Computational Methods in Bioinformatics",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course, the student should have successfully completed 60 credits of studies in Computer Science, Software Engineering, Data Science, Mathematics, Mathematical Statistics, or equivalent. Furthermore, the student should have successfully completed a course in Programming (DIT012 Imperative Programming with Basic Object-orientation, DIT042 Object-oriented Programming, DIT143 Functional programming, or equivalent) and a basic course in discrete mathematic (DIT980, DIT856 or equivalent). Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "This course demonstrates how computational methods that have been presented in other computing courses can be applied to solve problems in an application area. We look at problems related to the analysis of biological sequence data (sequence bioinformatics) and macromolecular structures (structural bioinformatics). Computing scientists need to be able to understand problems that originate in areas that may be unfamiliar to them, and to identify computational methods and approaches that can be used to solve them. Biological concepts needed to understand the problems will be introduced. Reading research articles is valuable training for scientists and researchers. Developing skill in reading research articles is useful preparation for future scientific studies, and at the same time their own scientific writing can be improved. Therefore, in this course, research articles are used as the main reference material, in particular to show how to present ideas and methods, and how to critically evaluate them. Computational methods and concepts featured in this course include: dynamic programming; heuristic algorithms; graph partitioning; image skeletonisation, smoothing and edge detection; clustering; sub-matrix matching; geometric hashing; constraint logic programming; Monte Carlo optimisation; simulated annealing; self-avoiding walks. Biological problems featured in this course include: sequence alignment; domain assignment; structure comparison; comparative modelling; protein folding; fold recognition; finding channels; molecular docking; protein design.",
    "assessment": "The course is examined by individual programming assignments and written assignments.",
    "grading": "The grading scale comprises Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/berakningsmetoder-i-bioinformatik-dit743",
      "international_website": "/en/study-gothenburg/computational-methods-in-bioinformatics-dit743",
      "course_name": "Computational Methods in Bioinformatics",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "3 Nov 2025",
      "duration_end": "18 Jan 2026",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-86067",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT743",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course demonstrates how computational methods that have been presented in other computing courses can be applied to solve problems in an application area. We look at problems related to the analysis of biological sequence data (sequence bioinformatics) and macromolecular structures (structural bioinformatics).\nComputing scientists need to be able to understand problems that originate in areas that may be unfamiliar to them, and to identify computational methods and approaches that can be used to solve them. Biological concepts needed to understand the problems will be introduced.\nReading research articles is valuable training for scientists and researchers. Developing skill in reading research articles is useful preparation for future scientific studies, and at the same time their own scientific writing can be improved. Therefore, in this course, research articles are used as the main reference material, in particular to show how to present ideas and methods, and how to critically evaluate them.\nComputational methods and concepts featured in this course include: dynamic programming; heuristic algorithms; graph partitioning; image skeletonisation, smoothing and edge detection; clustering; sub-matrix matching; geometric hashing; constraint logic programming; Monte Carlo optimisation; simulated annealing; selfavoiding walks.\nBiological problems featured in this course include: sequence alignment; domain assignment; structure comparison; comparative modelling; protein folding; fold recognition; finding channels; molecular docking; protein design.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course, the student should have successfully completed 60 credits of studies in Computer Science, Software Engineering, Data Science, Mathematics, Mathematical Statistics, or equivalent. Furthermore, the student should have successfully completed a course in Programming (DIT012 Imperative Programming with Basic Object-orientation, DIT042 Object-oriented Programming, DIT143 Functional programming, or equivalent) and a basic course in discrete mathematic (DIT980, DIT856 or equivalent).Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "16 December 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Explain fundamental concepts in software quality (e.g., internal / external quality, as well as quality in use) and quality assurance models; Describe how sustainability can be seen as a quality attribute in software products; Describe and explain definitions and activities related to software testing, such as faults, failures levels of testing and test automation; Explain current research trends within software quality and testing (e.g., test flakiness, search-based software testing); Explain the distinction between software verification and software validation; Name and describe different testing techniques and approaches, such as mutation testing, automated test prioritisation, test case generation, exploratory testing, etc; Explain the concept of continuous integration and relate them to software development processes",
        "competence_and_skills": "Define metrics required to monitor and analyse different quality attributes of software products; Measure quality of software products based on the data from development environments and tools; Explain and implement test activities in connection to different levels of testing (e.g., system, integration or unit level tests); Define and implement a test plan or a test scope based on quality goals; Design appropriate and meaningful tests; Apply automated testing technologies on realistic examples using relevant tools (e.g., automated regression testing on continuous integration pipelines); Use automated measurement systems for measuring quality of software products based on the data from the modern development tools; Use modern tools for visualisation of trends in software quality",
        "judgement_and_approach": "Assess the importance of software quality in relation to time and costs in software development projects; Assess the quality of sets of tests using software artefacts (e.g., execution logs, test scripts, history of test executions); Relate software quality to societal aspects of software development"
      }
    ],
    "course_code": "DIT843",
    "course_name": "Quality Assurance and Testing",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible for the course, the student should have a bachelor ́s degree in Software Engineering, Computer Science, Computer Engineering, Information Technology, Information Systems, or equivalent. In addition, the student should have completed courses in: Programming (e.g. DIT042 Object-oriented Programming, DIT012 Imperative Programming with Basic Object-orientation, DIT143 Functional Programming or equivalent) and Practical software development or software engineering project (e.g. DIT212 Object-oriented programming project, or DIT543 Software Engineering Project).",
    "course_content": "The course addresses the following content: Definitions of software quality assurance, quality attributes, software metrics and models in quality management, internal quality and external quality; Definitions and differences between software verification and validation approaches; Definitions and practical application of software testing techniques and approaches related to test planning, design, execution and analysis. The course prepares the students to work as quality or test engineers (or managers) in software development organizations.",
    "assessment": "The course is examined by an written report and an individual written examination carried out in an examination hall. The report is graded individually.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). To pass the course, all mandatory components must be passed. To earn a higher grade than Pass, a higher weighted average from the grades of the components is required.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/mjukvarukvalitetsakring-och-testning-dit843",
      "international_website": "/en/study-gothenburg/quality-assurance-and-testing-dit843",
      "course_name": "Quality Assurance and Testing",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "4 Nov 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18674",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT843",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "During this course the students will address the following content:\n- Definitions of software quality assurance, quality attributes, software metrics and models in quality management, internal quality and external quality;\n- Definitions and differences between software verification and validation approaches;\n- Definitions and practical application of software testing techniques and approaches related to test planning, design, execution and analysis.\nThe course will prepare the students to work as quality or test engineers (or managers) in software development organizations.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course, the student should have a bachelor´s degree in Software Engineering, Computer Science, Computer Engineering, Information Technology, Information Systems, or equivalent. In addition, the student should have completed courses in:\n- Programming (e.g. DIT042 Object-oriented Programming, DIT012 Imperative Programming with Basic Object-orientation, DIT143 Functional Programming or equivalent) and- Practical software development or software engineering project (e.g. DIT212 Objectoriented programming project, or DIT543 Software Engineering Project).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "29 August 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "Explain why human and social factors are critical in (successful) SE; Describe the risks of focusing mainly on technology in SE; Describe and explain what Behavioral Software Engineering (BSE) is and how it relates to socio-technical systems analysis, human factors studies, and Human-Computer Interaction; Describe important units of analysis in BSE: individual, group, organisational levels as well as how they interact; Describe key cognitive biases and how they affect software developers; Explain models of team development and maturity and how they relate to BSE; Give an overview of recent, empirical research on BSE",
        "competence_and_skills": "Analyse why an SE intervention, like a process improvement or the introduction of a new tool, failed or succeeded from a BSE perspective; Diagnose software teams based on their developmental maturity; Propose interventions to improve a software development team based on a BSE analysis; Identify cognitive biases that affect a particular developer or team; Design a SE study using research methods suited to BSE",
        "judgement_and_approach": "Analyse and hypothesize about sources of software project failures, and reflect on whether they are primarily because of technical or behavioral/human factors; Assess and discuss ethical aspects and concerns as well as sustainability in software development on an individual and societal level"
      }
    ],
    "course_code": "DIT849",
    "course_name": "Behavioral Software Engineering",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "Bachelor of science degree in Software Engineering, Computer Science, or corresponding/equivalent, Successfully completed project course in software development/engineering (7.5hp) Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example",
    "course_content": "Introduction to BSE - Individuals: Personality and Cognitive Biases Individuals: Motivation and Attitudes Individuals: Experience and Emotion Individuals: Personal sustainability Groups: Norms and Creativity Groups: Social factors on SW teams, Group dynamics Organisations: Politics, happiness & freedom Organisations: Gender, ethics and sustainability Research methods: Ethnography, Interview studies, Reflexivity Course summary: BSE implications and effects, Future of BSE in research & practice",
    "assessment": "Individual- and group-based exercises is the basis for examination. A final, individual essay/report is also part of the examination.",
    "grading": "Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/manskliga-aspekter-pa-programvaruteknik-dit849",
      "international_website": "/en/study-gothenburg/behavioral-software-engineering-dit849",
      "course_name": "Behavioral Software Engineering",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "24 Mar 2025",
      "duration_end": "8 Jun 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86086",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT849",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course will comprise a number of modules/themes:\nIntroduction to BSE - Individuals: Personality and Cognitive Biases\nIndividuals: Motivation and Attitudes\nIndividuals: Experience and Emotion\nIndividuals: Personal sustainability\nGroups: Norms and Creativity\nGroups: Social factors on SW teams, Group dynamics\nOrganisations: Politics, happiness & freedom\nOrganisations: Gender, ethics and sustainability\nResearch methods: Ethnography, Interview studies, Reflexivity\nCourse summary: BSE implications and effects, Future of BSE in research & practice",
      "prerequisites_and_selection": {
        "entry_requirements": "- Bachelor of science degree in Software Engineering, Computer Science, or corresponding/equivalent,- Successfully completed project course in software development/engineering (7.5hp)\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "13 December 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "account for basic notions of probability theory and statistical theory, with an emphasis on applications and experiments in data science; give examples of how probabilistic models are applied in data science applications",
        "competence_and_skills": "compute descriptive statistics and visualizations using statistical software libraries; implement a number of probabilistic models and apply them in data science applications; apply statistical tests for evaluating data science applications",
        "judgement_and_approach": "justify which type of statistical method is applicable for the most common types of experiments in data science applications; discuss advantages and drawbacks of different types of probabilistic models that can be applicable for a given data science application; discuss how the misuse of statistical techniques can lead to dubious conclusions"
      }
    ],
    "course_code": "DIT863",
    "course_name": "Statistical Methods for Data Science",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible to the course, the student should have a Bachelor's degree in any subject, or have successfully completed 90 credits of studies in computer science, software engineering, or equivalent. Specifically, the course requires at least 15 credits of successfully completed courses in programming, one of the courses DIT852 Introduction to Data Science or equivalent, or DIT856 Applied Mathematical Thinking or equivalent. Alternatively at least 15 credits of mathematics or mathematical statistics. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The course gives an introduction to the theory of probability and statistics, data analysis using descriptive statistics and data visualization, and applications of probabilistic modeling in data science. In the course, the following broad areas will be covered: data analysis including descriptive statistics and data visualization, probability theory including basic probability calculations, random variables, distributions, statistical methods including point and interval estimates, hypothesis testing, regression, probabilistic models in data science applications, for instance, Naive Bayes classifiers and topic models for text or Hidden Markov Models for sequences",
    "assessment": "The course is examined by an individual written take-home exam, as well as mandatory written assignments submitted as written reports, some of which will be carried out individually and others in groups of normally 2-4 students. There will be non-obligatory individual assignments which grant bonus points for the written exam. These bonus points are valid for the whole academic year. Late submission of the take-home exam results in the grade Fail (U), unless special reasons exist. A failed take-home exam is reexamined by a new take-home exam. If a student, who has failed the same examined component twice, wishes to change examiner before the next examination, a written application shall be sent to the department responsible for the course and shall be granted unless there are special reasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance). In cases where a course has been discontinued or has undergone major changes, the student shall normally be guaranteed at least three examination occasions (including the ordinary examination) during a period of at least one year from the last time the course was given.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). To pass the entire course it is required to get a grade at least 3 for all sub-courses. To be awarded a grade higher than 3 for the full course, a higher weighted average from the grades of the sub-courses is required.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/statistiska-metoder-for-data-science-dit863",
      "international_website": "/en/study-gothenburg/statistical-methods-for-data-science-dit863",
      "course_name": "Statistical Methods for Data Science",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "4 Nov 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18675",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT863",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The course gives an introduction to the theory of probability and statistics, data analysis using descriptive statistics and data visualization, and applications of probabilistic modeling in data science.\nIn the course, the following broad areas will be covered: data analysis including descriptive statistics and data visualization probability theory including basic probability calculations, random variables, distributions statistical methods including point and interval estimates, hypothesis testing, regression probabilistic models in data science applications, for instance, Naive Bayes classifiers and topic models for text or Hidden Markov Models for sequences",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible to the course, the student should have a Bachelor?s degree in any subject, or have successfully completed 90 credits of studies in computer science, software engineering, or equivalent. Specifically, the course requires the following: at least 15 credits of successfully completed courses in programming, one of the courses DIT852 Introduction to Data Science or equivalent, or DIT856 Applied Mathematical Thinking or equivalent. Alternatively at least 15 credits of mathematics or mathematical statistics. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "12 August 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "describe the most common types of machine learning problems; explain what types of problems can be addressed by machine learning, and the limitations of machine learning; account for why it is important to have informative data and features for the success of machine learning systems; explain on a high level how different machine learning models generalize from training examples",
        "competence_and_skills": "apply a machine learning toolkit in an application relevant to the data science area; write the code to implement some machine learning algorithms; apply evaluation methods to assess the quality of a machine learning system, and compare different machine learning systems",
        "judgement_and_approach": "discuss the advantages and limitations of different machine learning models with respect to a given task; reason about what type of information or features could be useful in a machine learning task; select the appropriate evaluation methodology for a machine learning system and motivate this choice; reason about ethical questions pertaining to machine learning systems"
      }
    ],
    "course_code": "DIT867",
    "course_name": "Applied Machine Learning",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible to the course, the student should have a Bachelor's degree in any subject, or have successfully completed 90 credits of studies in computer science, software engineering, or equivalent. Specifically, the course requires 7.5 credits programming, 7.5 credits introduction to data science or AI, such as DIT852 or DIT405, 7.5 credits calculus or mathematical modeling (such as DIT856), 7.5 credits probability theory, statistics, or mathematical statistics, such as DIT862. Alternatively have taken both of the following two courses: DIT847 and DIT278 (or equivalent) Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The course gives an introduction to machine learning techniques and theory, with a focus on its use in practical applications. During the course, a selection of topics will be covered in supervised learning, such as linear models for regression and classification, or nonlinear models such as neural networks, and in unsupervised learning such as clustering. The use cases and limitations of these algorithms will be discussed, and their implementation will be investigated in programming assignments. Methodological questions pertaining to the evaluation of machine learning systems will also be discussed, as well as some of the ethical questions that can arise when applying machine learning technologies. There will be a strong emphasis on the real-world context in which machine learning systems are used. The use of machine learning components in practical applications will be exemplified, and realistic scenarios will be studied in application areas such as e-commerce, business intelligence, natural language processing, image processing, and bioinformatics. The importance of the design and selection of features, and their reliability, will be discussed.",
    "assessment": "The course is examined by an individual written take-home examination, as well as mandatory written assignments submitted as written reports, some of which will be carried out individually and others in groups of normally 2-4 students. Late submission of the take-home examination results in the grade Fail (U), unless special reasons exist. A failed take-home examination is reexamined by a new take-home exam. If a student, who has failed the same examined component twice, wishes to change examiner before the next examination, a written application shall be sent to the department responsible for the course and shall be granted unless there are special reasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance). 1.Take-home examination (Hemtentamen), 4 credits Grading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U) 2.Assignments (Inlämningsuppgifter), 3.5 credits Grading scale: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U)",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U). The grading scale comprises Fail (U), 3, 4 or 5. To pass the course, all mandatory components must be passed. To be awarded a higher grade (4 or 5) for the full course, you need to have passed both the sub-courses with a grade of 4 or 5, respectively.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/tillampad-maskininlarning-dit867",
      "international_website": "/en/study-gothenburg/applied-machine-learning-dit867",
      "course_name": "Applied Machine Learning",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "20 Jan 2025",
      "duration_end": "23 Mar 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86002",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT867",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The course gives an introduction to machine learning techniques and theory, with a focus on its use in practical applications.\nDuring the course, a selection of topics will be covered in supervised learning, such as linear models for regression and classification, or nonlinear models such as neural networks, and in unsupervised learning such as clustering.\nThe use cases and limitations of these algorithms will be discussed, and their implementation will be investigated in programming assignments. Methodological questions pertaining to the evaluation of machine learning systems will also be discussed, as well as some of the ethical questions that can arise when applying machine learning technologies.\nThere will be a strong emphasis on the real-world context in which machine learning systems are used. The use of machine learning components in practical applications will be exemplified, and realistic scenarios will be studied in application areas such as ecommerce, business intelligence, natural language processing, image processing, and bioinformatics. The importance of the design and selection of features, and their reliability, will be discussed.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible to the course, the student should have a Bachelor's degree in any subject, or have successfully completed 90 credits of studies in computer science, software engineering, or equivalent. Specifically, the course requires:\n- 7\\.5 credits programming,- 7\\.5 credits introduction to data science or AI, such as DIT852 or DIT405,- 7\\.5 credits calculus or mathematical modeling (such as DIT856),- 7\\.5 credits probability theory, statistics, or mathematical statistics, such as DIT862. Alternatively have taken both of the following two courses: DIT847 and DIT278 (or equivalent)\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "23 September 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "describe concepts relating to the implementation of database management systems; compare and contrast features of relational and non-relational database management systems",
        "competence_and_skills": "construct Web ontology language statements corresponding to an Entity-Relationship diagram; construct RDF (Resource Description Framework) triples that contain data for a given domain; implement a graph database for a given domain; retrieve data using declarative query languages for graph databases",
        "judgement_and_approach": "discuss advantages and disadvantages of different database design decisions; discuss advantages and disadvantages of alternative query plans; discuss suitability of different database management systems for various tasks"
      }
    ],
    "course_code": "DIT930",
    "course_name": "Advanced databases",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "To be eligible to the course, the student should have a Bachelor's degree in any subject, or have successfully completed 90 credits of studies in computer science, software engineering, or equivalent. Specifically, at least 15 credits of successfully completed courses in programming or equivalent are required. The student also needs to have attended a course in databases of at least 7.5 credits (e.g. DIT621 Databases or DIT032 Data management).",
    "course_content": "database management system architecture and implementation concurrency and recovery indexes query processing and optimization Semantic Web; RDF; RDF Schema; SPARQL ontologies - NoSQL systems; aggregation-orientation; CAP theorem querying graph databases database applications",
    "assessment": "Written individual exam given in an examination hall and programming assignments. The programming assignments are normally carried out in pairs.",
    "grading": "The grading scale comprises: Pass with distinction (5), Pass with credit (4), Pass (3) and Fail (U).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/avancerade-databaser-dit930",
      "international_website": "/en/study-gothenburg/advanced-databases-dit930",
      "course_name": "Advanced databases",
      "period": "Spring 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "24 Mar 2025",
      "duration_end": "8 Jun 2025",
      "application_period_start": "16 Sep 2024",
      "application_period_end": "15 Oct 2024",
      "application_code": "GU-86052",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT930",
      "tuition": {
        "full_education_cost": "19 253 SEK",
        "first_payment": "19 253 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "The following topics will be discussed during the course:\ndatabase management system architecture and implementation\nconcurrency and recovery\nindexes\nquery processing and optimization\nSemantic Web; RDF; RDF Schema; SPARQL\nontologies - NoSQL systems; aggregation-orientation; CAP theorem\nquerying graph databases\ndatabase applications",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible to the course, the student should have a Bachelor's degree in any subject, or have successfully completed 90 credits of studies in computer science, software engineering, or equivalent. Specifically, at least 15 credits of successfully completed courses in programming or equivalent are required. The student also needs to have attended a course in databases of at least 7.5 credits (e.g. DIT621 Databases or DIT032 Data management).\nApplicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 285 credits"
      },
      "last_modified": "26 August 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "discuss differences between linear, interactive and immersive narrative, especially hybrids between these three; describe aspects of storytelling related to structure, character and emotional drive; list and explain technologies for movie production; list and explain technologies for branching and interactive narratives; list and explain technologies for virtual reality and immersive video",
        "competence_and_skills": "write a script for an engaging and interesting story told visually; plan for a narrative media production; create a narrative media production; verbal presentation of a pitch idea as well as a finalized media product",
        "judgement_and_approach": "argue for the pros and cons of linear and interactive storytelling, respectively; evaluate and choose different technologies for visual effects and interactive, immersive storytelling; discuss gender issues and other ethical consideration in relation to storytelling"
      }
    ],
    "course_code": "DIT998",
    "course_name": "Interactive and linear storytelling with digital media",
    "credits": "7.5",
    "department": "Department of Computer Science and Engineering",
    "entry_requirements": "The course is accessible for students who have either completed 120 hp at a bachelor level in subjects related to IT, art, design, media, communication or equivalent or equivalent professional experience, defined as being employed or running a private company for at least two years, with a position and/or work tasks related to art, design, media, communication or equivalent. Also, it is required to have successfully completed a course of 7,5 hp in programming. Applicants must prove knowledge of English: English 6/English B or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "Interactive storytelling and digital movie making.",
    "assessment": "The fullfilment of learning objectives is examined in the form of a short film project, as well as active discussions in movie and literature seminars. The project involves the development of digital moving images, possibly in interactive form. The project is assessed based on three perspectives; creative content, appropriate design solution and technical quality. The project is presented verbally and submitted digitally.",
    "grading": "The grading scale comprises: Pass (G) and Fail (U).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/interaktivt-och-linjart-berattande-med-digital-media-dit998",
      "international_website": "/en/study-gothenburg/interactive-and-linear-storytelling-with-digital-media-dit998",
      "course_name": "Interactive and linear storytelling with digital media",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "4 Nov 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18680",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/DIT998",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "Interactive storytelling and digital movie making.",
      "prerequisites_and_selection": {
        "entry_requirements": "The course is accessible for students who have either\n1. completed 120 hp at a bachelor level in subjects related to IT, art, design, media, communication or equivalent\" or2. equivalent professional experience, defined as being employed or running a private company for at least two years, with a position and/or work tasks related to art, design, media, communication or equivalent.\nAlso, it is required to have succesfully completed a course of 7,5 hp in programming.\nApplicants must prove knowledge of English: English 6/English B or the equivalent levelof an internationally recognized test, for example TOEFL, IELTS",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "19 June 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "describe basic programming concept such as functions, types and control structures; know what plagiarism implies; have knowledge of GU rules about plagiarism",
        "competence_and_skills": "use of department's language technology lab and its basic software; have basic proficiencies in programming, have the ability to independently solve simple language technology problems by means of a programming language; identify plagiarism; find information about plagiarism and GU rules about plagiarism; perform work according to a predetermined schedule",
        "judgement_and_approach": "make an informed assessment of how a problem can be represented and solved by means of a programming language."
      }
    ],
    "course_code": "LT2001",
    "course_name": "Introduction to programming",
    "credits": "7.5",
    "department": "Department of Philosophy, Linguistics and Theory of Science",
    "entry_requirements": "For admission to course a Bachelor Degree in some of the following subjects: computer science, computational linguistics or language technology, linguistics (including at least 30 credits in formal linguistics or programming), adjacent subject, e.g. cognitive science, languages, philosophy or mathematics (provided that the student has got 30 credits either in formal linguistics or programming), or the equivalent after assessment is required. English 6 or equivalent is also required.",
    "course_content": "The course gives an introduction to programming suitable for students who are used to formal reasoning but have never programmed before. The course include an introduction to basic computer science concepts such as algorithms, data structures and programming paradigms. Furthermore it introduces to programming and basic concepts, theories and technologies that are used in the Master's programme in Language technology.",
    "assessment": "The course is assessed by laboratory sessions, written and/or oral tests. Compulsory attendance may apply for some course components.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U). For a passing grade on the course, a passing grade must be achieved on the exercises, final assignment, and written examination. For a pass-with-distinction grade on the course, a pass-with-distinction grade must be achieved on the final assignment and written examination.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/introduktion-till-programmering-lt2001",
      "international_website": "/en/study-gothenburg/introduction-to-programming-lt2001",
      "course_name": "Introduction to programming",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "1 Sep 2025",
      "duration_end": "4 Nov 2025",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-24012",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/LT2001",
      "tuition": {
        "full_education_cost": "18 878 SEK",
        "first_payment": "18 878 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course will give an introduction to programming suitable for students who have not programmed before. It offers an introduction to computer science aspects like algorithms, data structures and programming paradigms.\nThe course also introduces the programming environment and basic concepts, theories and technologies used in the master's programme in language technology.",
      "prerequisites_and_selection": {
        "entry_requirements": "Students with an undergraduate degree (at least three year full-time study) in:\n- language technology, computational linguistics or computer science,- linguistics (with at least 30 credits, corresponding to half a year full-time study, in formal linguistics or programming),- adjacent subjects, e.g. cognitive science, languages, philosophy or mathematics (provided that the student can show a background in either programming or formal linguistics corresponding to 30 credits, that is half a year full-time study), or- certificate from their department assessing that they fulfill equivalent qualifications.\nTo provide the requirement in English by an internationally recognized test, for example TOEFL, IELTS, the English proficiency should be equivalent to the level of English 5/English Course A from Swedish Upper Secondary School.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "16 December 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "describe, characterize and classify formal and informal forms of work for digital professional learning; identify key trends in relation to the digitalisation of professional learning and digital work",
        "competence_and_skills": "identify and critically examine commonly used theories for understanding digitalisation processes in relation to professional learning; contextualize digital technology use in relation to professional learning in a selection of sectors; suggest and motivate a process for supporting and evaluating a professional learning situation where digital platforms are integrated",
        "judgement_and_approach": "judge the relevance of formal and informal forms of work for digital professional learning; evaluate the impact of digitalisation in a selection of different professional learning practices based on ideals of a sustainable worklife"
      }
    ],
    "course_code": "PDA679",
    "course_name": "Professional learning in a digital world",
    "credits": "15",
    "department": "Department of Education, Communication and Learning",
    "entry_requirements": "To be eligible for the course the student must possess a Bachelor's degree with a minimum of 180 higher education credits or an equivalent degree. Furthermore, the student must demonstrate proficiency in English equivalent to English B (Swedish upper secondary level) or English 6 (equivalent) with at least a pass, or a valid test of English as a foreign language TOEFL (232 computer based), 575 (paper based) or IELTS with a minimum score of 6.0 in all scores, alternatively a Bachelor’s degree from an education offered in English.",
    "course_content": "This course focuses on the digital transformation of professional and workplace learning. Aspects like formal and informal forms of learning and work are examined in relation to institutional public and private sectors as well as other emerging professional communities. By focusing on the changing practices of professionals in different areas like engineering, nursing and teaching, the course addresses the various ways that digital technologies reconfigure activities such as training, coaching and professional learning community participation. In addition to theories of digital professional learning in Education and Adult Learning, the course connects to theories in related areas such as Work and Organization Studies and Human Resource Development. The course is related to the United Nation’s Agenda 2030 sustainable development goals by suggesting designs for professional and lifelong learning, and by problematizing social and technological sustainability with a focus on work life digitalization.",
    "assessment": "The assessment is based on the following assignments: •Individually written paper, graded pass with distinction (VG), pass (G), or fail (U) •Group based work and presentation, graded pass (G), or fail (U) If a student, who has failed the same examined component twice, wishes to change examiner before the next examination, a written application shall be sent to the department responsible for the course and shall be granted unless there are special reasons to the contrary (Chapter 6, Section 22 of Higher Education Ordinance). In the event that a course has ceased or undergone major changes, students are to be guaranteed at least three examination sessions (including the ordinary examination session) over a period of at least one year, though at most two years after the course has ceased/been changed.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U). 1 Groupwork 5 HEC (U-G) 2 Individual paper 10 HEC (U-G-VG)",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/professionellt-larande-i-digitala-miljoer-pda679",
      "international_website": "/en/study-gothenburg/professional-learning-in-a-digital-world-pda679",
      "course_name": "Professional learning in a digital world",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "2 Sep 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-19355",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/PDA679",
      "tuition": {
        "full_education_cost": "23 000 SEK",
        "first_payment": "23 000 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "This course focuses on the digital transformation of professional and workplace learning. Aspects like formal and informal forms of learning and work are examined in relation to institutional public and private sectors as well as other emerging professional communities. By focusing on the changing practices of professionals in different areas like engineering, nursing and teaching, the course addresses the various ways that digital technologies reconfigure activities such as training, coaching and professional learning community participation. In addition to theories of digital professional learning in Education and Adult Learning, the course connects to theories in related areas such as Work and Organization Studies and Human Resource Development.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course the student must possess a Bachelor's degree with a minimum of 180 higher education credits or an equivalent degree.\nFurthermore, the student must demonstrate proficiency in English equivalent to English B (Swedish upper secondary level) or English 6 (equivalent) with at least a pass, or a valid test of English as a foreign language TOEFL (232 computer based), 575 (paper based) or IELTS with a minimum score of 6.0 in all scores, alternatively a Bachelor's degree from an education offered in English.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "19 December 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "critically reflect on key concepts and perspectives related to the constructed nature of data and the role of digital data platforms, such as social media and data infrastructures; describe how circulation and use of data are shaped by social and material factors, including social institutions and technologies; describe the social and cultural consequences of how data is constructed, particularly with regard to gender, class, and ethnicity",
        "competence_and_skills": "select and use relevant digital tools to engage in the analysis and interpretation of a dataset leading to proposed hypotheses of root causes that can inform improvement actions; present results orally and visually in a professional manner; discuss the potential and constraints of using data critically and constructively",
        "judgement_and_approach": "apply data inquiry using digital techniques for collecting, cleaning, analyzing, and visualizing data; consider the potential and constraints of using data for public debate and social intervention; critically evaluate possible data biases for the development of Artificial Intelligence"
      }
    ],
    "course_code": "TIA125",
    "course_name": "Data and Society",
    "credits": "7.5",
    "department": "Department of Applied Information Technology",
    "entry_requirements": "To be eligible for the course the student must have a Bachelor's degree (180 credits). Applicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS, or alternatively a bachelor's degree from an education held in English.",
    "course_content": "The course intends to connect data construction as a highly technological practice to broad social questions of structural inequalities, evidence, and knowledge. It examines how datafication produced by digital technologies creates and structures society and maintains specific asymmetries and power relations. Using concepts from Science and Technology Studies and Critical Data Studies, the course aims to provide tools to understand the constructed nature of data and engage the students in inquiring about data through their collection, analysis, visualization, and interpretation.",
    "assessment": "Assessment and grading in the course are based on three compulsory parts: a) active participation in four compulsory student-led seminars, 3 credits. Grading scale: Pass (G) and Fail (U). In case of absence from a maximum of two seminars, there is the opportunity to do a compensatory assignment determined in consultation with the course coordinator. In case of absence from three or more student-led seminars, a student must participate in a compensatory seminar, in addition to the compensatory assignments. b) individual reflective essay, 1.5 credits. Grading scale: Pass with Distinction (VG), Pass (G) and Fail (U). c) the content of group work and conduction of the oral presentation of group work, 3 credits. Grading scale: Pass (G) and Fail (U). If a student is prevented from taking part in the group work for a legitimate reason of absence (e.g., medical condition, caretaking responsibilities), the examiner may decide to provide an alternative form of examination. If a student fails the alternative examination form, s/he can redo it at the next course occasion.",
    "grading": "The grading scale comprises: Pass with Distinction (VG), Pass (G) and Fail (U).",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/data-och-samhalle-tia125",
      "international_website": "/en/study-gothenburg/data-and-society-tia125",
      "course_name": "Data and Society",
      "period": "Autumn 2024",
      "study_pace": "50%",
      "time": "Day",
      "location": "Göteborg",
      "study_form": "Campus",
      "language": "English",
      "duration_start": "5 Nov 2024",
      "duration_end": "19 Jan 2025",
      "application_period_start": "15 Mar 2024",
      "application_period_end": "15 Apr 2024",
      "application_code": "GU-18751",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/TIA125",
      "tuition": {
        "full_education_cost": "19 250 SEK",
        "first_payment": "19 250 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "Data is drastically changing how we function, both as individuals and as societies. An abundance of data is produced in every sector of society. Data is a product of every human activity, from counting steps or calories on an individual level, to measuring societal aspects such as level of education and employment. The fundamental impact of this development gives rise to the need to ask question like: How do we use this data? For what purpose, and who benefits from it? This course will teach you how to begin answering such questions.\nDrawing from Science and Technology Studies and Critical Data Studies, you will be introduced to the concepts to understand the constructed nature of data. You will engage in exploring data through their collection, analysis, visualisation, and interpretation. You will develop the skills needed to connect the construction of data as a highly technological practice to broad social questions of structural inequalities, evidence, and knowledge. You will examine how datafication produced by digital technologies creates and structures society, and maintains certain asymmetries and power relations.\nThis course addresses master's students from the social sciences and the humanities who wish to develop skills in relation to data processing and visualisation while maintaining and furthering a critical mode of inquiry into practices that affect our life as individuals and society. It also speaks to students with technical backgrounds who wish to develop a more critical understanding of the social and political consequences of data-driven societies today.",
      "prerequisites_and_selection": {
        "entry_requirements": "To be eligible for the course the student must have a Bachelor's degree (180 credits).\nApplicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS, or alternatively a bachelor's degree from an education held in English.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "19 June 2024"
    }
  },
  {
    "learning_outcomes": [
      {
        "knowledge_and_understanding": "discuss digitalisation in sports, based on central concepts in the field; outline how digital technology effects traditional sports and athletics",
        "competence_and_skills": "sytematically investigate digital innovation in specific sports",
        "judgement_and_approach": "reflect on how different sports have met with technological developments and changes in how technology is used; analyse how digitalisation in sports develope and challenge the existing conditions"
      }
    ],
    "course_code": "TIA161",
    "course_name": "Digital Innovation in Sports",
    "credits": "7.5",
    "department": "Department of Applied Information Technology",
    "entry_requirements": "Bachelor's degree (180 credits). Applicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
    "course_content": "The course consists of two parts: Sub-courses 1.Basic Theories and Concepts (Grundläggande teorier och begrepp), 3 credits Grading scale: Pass (G) and Fail (U) In the first part of the course the student will get an overview of concepts that help explain digitalisation and concepts to describe sports and athletics. In this part we will also address questions about how digitalisation relates to equality, justice and sustainability. The students will be exposed to a number of overall concepts through lectures, literature studies and discussions. The examination is based on the student's ability to understand the meaning of the concepts. 2.Analysis of technology use (Analys av teknikanvändning), 4.5 credits Grading scale: Pass (G) and Fail (U) In the second part of the course, the student must perform an analysis of a specific sport with a focus on digitalisation. This part will be carried out individually or as a group task. During the examination, the student(s) must be able to describe the use of technology in a specific sport, reason about how the use has developed over time and reflect on possible future consequences. The analysis must be based on the concepts introduced in the first part of the course.",
    "assessment": "The first part of the course is examined through a digital exam that is connected to learning outcomes 1 and 5. The second part of the course is examined through a written assignment as well as an oral presentation. This part of the examination is connected to the learning outcomes 2, 3 and 4.",
    "grading": "The grading scale comprises: Pass (G) and Fail (U). In order to recieve a pass grade for the whole course, the student must get a pass grade for each part of the examination.",
    "language": "English",
    "website": {
      "svenska": "/studera/hitta-utbildning/digital-innovation-i-sport-tia161",
      "international_website": "/en/study-gothenburg/digital-innovation-in-sports-tia161",
      "course_name": "Digital Innovation in Sports",
      "period": "Autumn 2025",
      "study_pace": "50%",
      "time": "Mixed time",
      "location": "Göteborg",
      "study_form": "Distance",
      "language": "English",
      "duration_start": "5 Nov 2025",
      "duration_end": "18 Jan 2026",
      "application_period_start": "17 Mar 2025",
      "application_period_end": "15 Apr 2025",
      "application_code": "GU-87017",
      "syllabus": "https://kursplaner.gu.se/pdf/kurs/en/TIA161",
      "tuition": {
        "full_education_cost": "17 753 SEK",
        "first_payment": "17 753 SEK",
        "fee_info": "No fees are charged for EU and EEA citizens, Swedish residence permit holders and exchange students.",
        "tuition_link": "https://www.gu.se/en/study-in-gothenburg/apply/tuition-fees"
      },
      "about": "Recent years have seen drastic developments in terms of digitalisation in sports. The use of digital technology in sports affects how sports teams are organized and managed, how we gain access to sports information and design new sports equipment. Digitization has also created new sports, such as e-Sports, which have major consequences for the perception of what sports are and how sports are practiced. The development of analytical technology to support performance improvement has also been intensified with the help of digitalisation.\nThis course gives you the opportunity to acquire and apply knowledge about digitalisation in sports as a general societal phenomenon as well as professionalized specialized activities. After the course, you will have the ability to analyze, evaluate and explain how digitalisation affects and develops different sports.\nOnline education\nThe course is given entirely online. You will have the possibility to participate in the course in a way that suits you. You can either follow the course synchronously, with lectures and seminars online, or take part in the content asynchronously, when you have time. It is also possible to adapt the course pace to your own circumstances. In this way, it is possible to complete the course alongside other activities, such as work or other studies.\nMultiple perspectives\nYou will gain insights into how digital technologies have influenced endurance sports such as running, cycling and cross-country skiing, as well as team sports such as football and ice hockey. We will also focus on emerging technologies and platforms.\nThe perspectives that will be treated, the literature as well as guest lecturers in the course are chosen based on an effort to offer a breadth of approaches that are inclusive and equal.",
      "prerequisites_and_selection": {
        "entry_requirements": "Bachelor's degree (180 credits). Applicants must prove their knowledge of English: English 6/English B from Swedish Upper Secondary School or the equivalent level of an internationally recognized test, for example TOEFL, IELTS.",
        "selection": "Selection is based upon the number of credits from previous university studies, maximum 165 credits."
      },
      "last_modified": "20 November 2024"
    }
  }
]